/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface L1MessengerMockInterface extends utils.Interface {
  functions: {
    "called()": FunctionFragment;
    "sendToL1(bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "called" | "sendToL1"): FunctionFragment;

  encodeFunctionData(functionFragment: "called", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendToL1",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "called", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendToL1", data: BytesLike): Result;

  events: {
    "L1MessageSent(address,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "L1MessageSent"): EventFragment;
}

export interface L1MessageSentEventObject {
  _sender: string;
  _hash: string;
  _message: string;
}
export type L1MessageSentEvent = TypedEvent<
  [string, string, string],
  L1MessageSentEventObject
>;

export type L1MessageSentEventFilter = TypedEventFilter<L1MessageSentEvent>;

export interface L1MessengerMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1MessengerMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    called(overrides?: CallOverrides): Promise<[boolean]>;

    sendToL1(
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  called(overrides?: CallOverrides): Promise<boolean>;

  sendToL1(
    _message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    called(overrides?: CallOverrides): Promise<boolean>;

    sendToL1(
      _message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "L1MessageSent(address,bytes32,bytes)"(
      _sender?: PromiseOrValue<string> | null,
      _hash?: PromiseOrValue<BytesLike> | null,
      _message?: null
    ): L1MessageSentEventFilter;
    L1MessageSent(
      _sender?: PromiseOrValue<string> | null,
      _hash?: PromiseOrValue<BytesLike> | null,
      _message?: null
    ): L1MessageSentEventFilter;
  };

  estimateGas: {
    called(overrides?: CallOverrides): Promise<BigNumber>;

    sendToL1(
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    called(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendToL1(
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
