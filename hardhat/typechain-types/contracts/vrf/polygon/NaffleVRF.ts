/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface NaffleVRFInterface extends utils.Interface {
  functions: {
    "COORDINATOR()": FunctionFragment;
    "VRFManager()": FunctionFragment;
    "chainlinkRequestStatus(uint256)": FunctionFragment;
    "chainlinkVRFCallbackGasLimit()": FunctionFragment;
    "chainlinkVRFGasLaneKeyHash()": FunctionFragment;
    "chainlinkVRFRequestConfirmations()": FunctionFragment;
    "chainlinkVRFSubscriptionId()": FunctionFragment;
    "drawWinner(uint256)": FunctionFragment;
    "naffleIdToChainlinkRequestId(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setChainlinkVRFSettings(uint64,bytes32,uint32,uint16)": FunctionFragment;
    "setVRFManager(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COORDINATOR"
      | "VRFManager"
      | "chainlinkRequestStatus"
      | "chainlinkVRFCallbackGasLimit"
      | "chainlinkVRFGasLaneKeyHash"
      | "chainlinkVRFRequestConfirmations"
      | "chainlinkVRFSubscriptionId"
      | "drawWinner"
      | "naffleIdToChainlinkRequestId"
      | "owner"
      | "rawFulfillRandomWords"
      | "renounceOwnership"
      | "setChainlinkVRFSettings"
      | "setVRFManager"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COORDINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VRFManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkRequestStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkVRFCallbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkVRFGasLaneKeyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkVRFRequestConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkVRFSubscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawWinner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "naffleIdToChainlinkRequestId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkVRFSettings",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVRFManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "COORDINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VRFManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkRequestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkVRFCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkVRFGasLaneKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkVRFRequestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkVRFSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "naffleIdToChainlinkRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkVRFSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVRFManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkRequestFulfilled(uint256,uint256,uint256)": EventFragment;
    "NaffleWinnerRolled(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkRequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NaffleWinnerRolled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ChainlinkRequestFulfilledEventObject {
  requestId: BigNumber;
  naffleId: BigNumber;
  winningNumber: BigNumber;
}
export type ChainlinkRequestFulfilledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ChainlinkRequestFulfilledEventObject
>;

export type ChainlinkRequestFulfilledEventFilter =
  TypedEventFilter<ChainlinkRequestFulfilledEvent>;

export interface NaffleWinnerRolledEventObject {
  naffleId: BigNumber;
}
export type NaffleWinnerRolledEvent = TypedEvent<
  [BigNumber],
  NaffleWinnerRolledEventObject
>;

export type NaffleWinnerRolledEventFilter =
  TypedEventFilter<NaffleWinnerRolledEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface NaffleVRF extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NaffleVRFInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COORDINATOR(overrides?: CallOverrides): Promise<[string]>;

    VRFManager(overrides?: CallOverrides): Promise<[string]>;

    chainlinkRequestStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber] & {
        fulfilled: boolean;
        exists: boolean;
        randomNumber: BigNumber;
        naffleId: BigNumber;
      }
    >;

    chainlinkVRFCallbackGasLimit(overrides?: CallOverrides): Promise<[number]>;

    chainlinkVRFGasLaneKeyHash(overrides?: CallOverrides): Promise<[string]>;

    chainlinkVRFRequestConfirmations(
      overrides?: CallOverrides
    ): Promise<[number]>;

    chainlinkVRFSubscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    drawWinner(
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    naffleIdToChainlinkRequestId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChainlinkVRFSettings(
      _subscriptionId: PromiseOrValue<BigNumberish>,
      _gasLaneKeyHash: PromiseOrValue<BytesLike>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVRFManager(
      _newVRFManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  COORDINATOR(overrides?: CallOverrides): Promise<string>;

  VRFManager(overrides?: CallOverrides): Promise<string>;

  chainlinkRequestStatus(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber] & {
      fulfilled: boolean;
      exists: boolean;
      randomNumber: BigNumber;
      naffleId: BigNumber;
    }
  >;

  chainlinkVRFCallbackGasLimit(overrides?: CallOverrides): Promise<number>;

  chainlinkVRFGasLaneKeyHash(overrides?: CallOverrides): Promise<string>;

  chainlinkVRFRequestConfirmations(overrides?: CallOverrides): Promise<number>;

  chainlinkVRFSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  drawWinner(
    _naffleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  naffleIdToChainlinkRequestId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChainlinkVRFSettings(
    _subscriptionId: PromiseOrValue<BigNumberish>,
    _gasLaneKeyHash: PromiseOrValue<BytesLike>,
    _callbackGasLimit: PromiseOrValue<BigNumberish>,
    _requestConfirmations: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVRFManager(
    _newVRFManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COORDINATOR(overrides?: CallOverrides): Promise<string>;

    VRFManager(overrides?: CallOverrides): Promise<string>;

    chainlinkRequestStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber] & {
        fulfilled: boolean;
        exists: boolean;
        randomNumber: BigNumber;
        naffleId: BigNumber;
      }
    >;

    chainlinkVRFCallbackGasLimit(overrides?: CallOverrides): Promise<number>;

    chainlinkVRFGasLaneKeyHash(overrides?: CallOverrides): Promise<string>;

    chainlinkVRFRequestConfirmations(
      overrides?: CallOverrides
    ): Promise<number>;

    chainlinkVRFSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    drawWinner(
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    naffleIdToChainlinkRequestId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setChainlinkVRFSettings(
      _subscriptionId: PromiseOrValue<BigNumberish>,
      _gasLaneKeyHash: PromiseOrValue<BytesLike>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVRFManager(
      _newVRFManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChainlinkRequestFulfilled(uint256,uint256,uint256)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      naffleId?: PromiseOrValue<BigNumberish> | null,
      winningNumber?: null
    ): ChainlinkRequestFulfilledEventFilter;
    ChainlinkRequestFulfilled(
      requestId?: PromiseOrValue<BigNumberish> | null,
      naffleId?: PromiseOrValue<BigNumberish> | null,
      winningNumber?: null
    ): ChainlinkRequestFulfilledEventFilter;

    "NaffleWinnerRolled(uint256)"(
      naffleId?: PromiseOrValue<BigNumberish> | null
    ): NaffleWinnerRolledEventFilter;
    NaffleWinnerRolled(
      naffleId?: PromiseOrValue<BigNumberish> | null
    ): NaffleWinnerRolledEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    COORDINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    VRFManager(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkRequestStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainlinkVRFCallbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkVRFGasLaneKeyHash(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkVRFRequestConfirmations(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainlinkVRFSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    drawWinner(
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    naffleIdToChainlinkRequestId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChainlinkVRFSettings(
      _subscriptionId: PromiseOrValue<BigNumberish>,
      _gasLaneKeyHash: PromiseOrValue<BytesLike>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVRFManager(
      _newVRFManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COORDINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VRFManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlinkRequestStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainlinkVRFCallbackGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainlinkVRFGasLaneKeyHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainlinkVRFRequestConfirmations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainlinkVRFSubscriptionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawWinner(
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    naffleIdToChainlinkRequestId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkVRFSettings(
      _subscriptionId: PromiseOrValue<BigNumberish>,
      _gasLaneKeyHash: PromiseOrValue<BytesLike>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVRFManager(
      _newVRFManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
