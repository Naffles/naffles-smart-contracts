/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace FoundersKeyStaking {
  export type StakeInfoStruct = {
    nftId: PromiseOrValue<BigNumberish>;
    stakedSince: PromiseOrValue<BigNumberish>;
    stakingPeriod: PromiseOrValue<BigNumberish>;
  };

  export type StakeInfoStructOutput = [number, BigNumber, number] & {
    nftId: number;
    stakedSince: BigNumber;
    stakingPeriod: number;
  };
}

export interface FoundersKeyStakingInterface extends utils.Interface {
  functions: {
    "FoundersKeyAddress()": FunctionFragment;
    "ONE_MONTH()": FunctionFragment;
    "SIX_MONTHS()": FunctionFragment;
    "SoulboundFoundersKeyAddress()": FunctionFragment;
    "THREE_MONTHS()": FunctionFragment;
    "TWELVE_MONTHS()": FunctionFragment;
    "getBestStakedNFTInfo(address)": FunctionFragment;
    "getStakedInfoForNFTId(address,uint16)": FunctionFragment;
    "getStakedNFTInfos(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFoundersKeyAddress(address)": FunctionFragment;
    "setSoulboundFoundersKeyAddress(address)": FunctionFragment;
    "stake(uint16,uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unstake(uint16)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userStakeInfo(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FoundersKeyAddress"
      | "ONE_MONTH"
      | "SIX_MONTHS"
      | "SoulboundFoundersKeyAddress"
      | "THREE_MONTHS"
      | "TWELVE_MONTHS"
      | "getBestStakedNFTInfo"
      | "getStakedInfoForNFTId"
      | "getStakedNFTInfos"
      | "initialize"
      | "onERC721Received"
      | "owner"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setFoundersKeyAddress"
      | "setSoulboundFoundersKeyAddress"
      | "stake"
      | "transferOwnership"
      | "unpause"
      | "unstake"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "userStakeInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FoundersKeyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE_MONTH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SIX_MONTHS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SoulboundFoundersKeyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "THREE_MONTHS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TWELVE_MONTHS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBestStakedNFTInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedInfoForNFTId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedNFTInfos",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFoundersKeyAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSoulboundFoundersKeyAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakeInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "FoundersKeyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE_MONTH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SIX_MONTHS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SoulboundFoundersKeyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "THREE_MONTHS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TWELVE_MONTHS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestStakedNFTInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedInfoForNFTId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedNFTInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFoundersKeyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSoulboundFoundersKeyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakeInfo",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "UserStaked(address,uint16,uint256,uint8)": EventFragment;
    "UserUnstaked(address,uint16,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserUnstaked"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface UserStakedEventObject {
  userAddress: string;
  nftId: number;
  stakeTime: BigNumber;
  stakingPeriod: number;
}
export type UserStakedEvent = TypedEvent<
  [string, number, BigNumber, number],
  UserStakedEventObject
>;

export type UserStakedEventFilter = TypedEventFilter<UserStakedEvent>;

export interface UserUnstakedEventObject {
  userAddress: string;
  nftId: number;
  unstakeTime: BigNumber;
}
export type UserUnstakedEvent = TypedEvent<
  [string, number, BigNumber],
  UserUnstakedEventObject
>;

export type UserUnstakedEventFilter = TypedEventFilter<UserUnstakedEvent>;

export interface FoundersKeyStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FoundersKeyStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FoundersKeyAddress(overrides?: CallOverrides): Promise<[string]>;

    ONE_MONTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<[BigNumber]>;

    SoulboundFoundersKeyAddress(overrides?: CallOverrides): Promise<[string]>;

    THREE_MONTHS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TWELVE_MONTHS(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBestStakedNFTInfo(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number, BigNumber]>;

    getStakedInfoForNFTId(
      _userAddress: PromiseOrValue<string>,
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[FoundersKeyStaking.StakeInfoStructOutput]>;

    getStakedNFTInfos(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[FoundersKeyStaking.StakeInfoStructOutput[]]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFoundersKeyAddress(
      _foundersKeyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSoulboundFoundersKeyAddress(
      _soulboundFoundersKeyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      _nftId: PromiseOrValue<BigNumberish>,
      _stakingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userStakeInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number] & {
        nftId: number;
        stakedSince: BigNumber;
        stakingPeriod: number;
      }
    >;
  };

  FoundersKeyAddress(overrides?: CallOverrides): Promise<string>;

  ONE_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

  SIX_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

  SoulboundFoundersKeyAddress(overrides?: CallOverrides): Promise<string>;

  THREE_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

  TWELVE_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

  getBestStakedNFTInfo(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, number, BigNumber]>;

  getStakedInfoForNFTId(
    _userAddress: PromiseOrValue<string>,
    _nftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<FoundersKeyStaking.StakeInfoStructOutput>;

  getStakedNFTInfos(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<FoundersKeyStaking.StakeInfoStructOutput[]>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFoundersKeyAddress(
    _foundersKeyAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSoulboundFoundersKeyAddress(
    _soulboundFoundersKeyAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    _nftId: PromiseOrValue<BigNumberish>,
    _stakingPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _nftId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userStakeInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, number] & {
      nftId: number;
      stakedSince: BigNumber;
      stakingPeriod: number;
    }
  >;

  callStatic: {
    FoundersKeyAddress(overrides?: CallOverrides): Promise<string>;

    ONE_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    SoulboundFoundersKeyAddress(overrides?: CallOverrides): Promise<string>;

    THREE_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    TWELVE_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    getBestStakedNFTInfo(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number, BigNumber]>;

    getStakedInfoForNFTId(
      _userAddress: PromiseOrValue<string>,
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<FoundersKeyStaking.StakeInfoStructOutput>;

    getStakedNFTInfos(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<FoundersKeyStaking.StakeInfoStructOutput[]>;

    initialize(overrides?: CallOverrides): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFoundersKeyAddress(
      _foundersKeyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSoulboundFoundersKeyAddress(
      _soulboundFoundersKeyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _nftId: PromiseOrValue<BigNumberish>,
      _stakingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstake(
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    userStakeInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number] & {
        nftId: number;
        stakedSince: BigNumber;
        stakingPeriod: number;
      }
    >;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "UserStaked(address,uint16,uint256,uint8)"(
      userAddress?: null,
      nftId?: null,
      stakeTime?: null,
      stakingPeriod?: null
    ): UserStakedEventFilter;
    UserStaked(
      userAddress?: null,
      nftId?: null,
      stakeTime?: null,
      stakingPeriod?: null
    ): UserStakedEventFilter;

    "UserUnstaked(address,uint16,uint256)"(
      userAddress?: null,
      nftId?: null,
      unstakeTime?: null
    ): UserUnstakedEventFilter;
    UserUnstaked(
      userAddress?: null,
      nftId?: null,
      unstakeTime?: null
    ): UserUnstakedEventFilter;
  };

  estimateGas: {
    FoundersKeyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    SoulboundFoundersKeyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    THREE_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    TWELVE_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    getBestStakedNFTInfo(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedInfoForNFTId(
      _userAddress: PromiseOrValue<string>,
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedNFTInfos(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFoundersKeyAddress(
      _foundersKeyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSoulboundFoundersKeyAddress(
      _soulboundFoundersKeyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      _nftId: PromiseOrValue<BigNumberish>,
      _stakingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userStakeInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FoundersKeyAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_MONTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SoulboundFoundersKeyAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    THREE_MONTHS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TWELVE_MONTHS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBestStakedNFTInfo(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedInfoForNFTId(
      _userAddress: PromiseOrValue<string>,
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedNFTInfos(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFoundersKeyAddress(
      _foundersKeyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSoulboundFoundersKeyAddress(
      _soulboundFoundersKeyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _nftId: PromiseOrValue<BigNumberish>,
      _stakingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userStakeInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
