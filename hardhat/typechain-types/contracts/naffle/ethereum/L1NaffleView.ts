/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace NaffleTypes {
  export type L1NaffleStruct = {
    tokenAddress: PromiseOrValue<string>;
    nftId: PromiseOrValue<BigNumberish>;
    naffleId: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    winner: PromiseOrValue<string>;
    cancelled: PromiseOrValue<boolean>;
    naffleTokenType: PromiseOrValue<BigNumberish>;
  };

  export type L1NaffleStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
    number
  ] & {
    tokenAddress: string;
    nftId: BigNumber;
    naffleId: BigNumber;
    owner: string;
    winner: string;
    cancelled: boolean;
    naffleTokenType: number;
  };
}

export interface L1NaffleViewInterface extends utils.Interface {
  functions: {
    "_getNaffleById(uint256)": FunctionFragment;
    "getAdminRole()": FunctionFragment;
    "getFoundersKeyAddress()": FunctionFragment;
    "getFoundersKeyPlaceholderAddress()": FunctionFragment;
    "getMinimumNaffleDuration()": FunctionFragment;
    "getMinimumPaidTicketPriceInWei()": FunctionFragment;
    "getMinimumPaidTicketSpots()": FunctionFragment;
    "getNaffleById(uint256)": FunctionFragment;
    "getZkSyncAddress()": FunctionFragment;
    "getZkSyncNaffleContractAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_getNaffleById"
      | "getAdminRole"
      | "getFoundersKeyAddress"
      | "getFoundersKeyPlaceholderAddress"
      | "getMinimumNaffleDuration"
      | "getMinimumPaidTicketPriceInWei"
      | "getMinimumPaidTicketSpots"
      | "getNaffleById"
      | "getZkSyncAddress"
      | "getZkSyncNaffleContractAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_getNaffleById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFoundersKeyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFoundersKeyPlaceholderAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumNaffleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumPaidTicketPriceInWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumPaidTicketSpots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNaffleById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getZkSyncAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getZkSyncNaffleContractAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_getNaffleById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFoundersKeyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFoundersKeyPlaceholderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumNaffleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumPaidTicketPriceInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumPaidTicketSpots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNaffleById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZkSyncAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZkSyncNaffleContractAddress",
    data: BytesLike
  ): Result;

  events: {
    "L1NaffleCancelled(uint256)": EventFragment;
    "L1NaffleCreated(uint256,address,address,uint256,uint256,uint256,uint256,uint8,uint8)": EventFragment;
    "L1NaffleWinnerSet(uint256,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "L1NaffleCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "L1NaffleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "L1NaffleWinnerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface L1NaffleCancelledEventObject {
  naffleId: BigNumber;
}
export type L1NaffleCancelledEvent = TypedEvent<
  [BigNumber],
  L1NaffleCancelledEventObject
>;

export type L1NaffleCancelledEventFilter =
  TypedEventFilter<L1NaffleCancelledEvent>;

export interface L1NaffleCreatedEventObject {
  naffleId: BigNumber;
  owner: string;
  ethTokenAddress: string;
  nftId: BigNumber;
  paidTicketSpots: BigNumber;
  ticketPriceInWei: BigNumber;
  endTime: BigNumber;
  naffleType: number;
  tokenContractType: number;
}
export type L1NaffleCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number
  ],
  L1NaffleCreatedEventObject
>;

export type L1NaffleCreatedEventFilter = TypedEventFilter<L1NaffleCreatedEvent>;

export interface L1NaffleWinnerSetEventObject {
  naffleId: BigNumber;
  winner: string;
}
export type L1NaffleWinnerSetEvent = TypedEvent<
  [BigNumber, string],
  L1NaffleWinnerSetEventObject
>;

export type L1NaffleWinnerSetEventFilter =
  TypedEventFilter<L1NaffleWinnerSetEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface L1NaffleView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1NaffleViewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getNaffleById(
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [NaffleTypes.L1NaffleStructOutput] & {
        naffle: NaffleTypes.L1NaffleStructOutput;
      }
    >;

    getAdminRole(overrides?: CallOverrides): Promise<[string]>;

    getFoundersKeyAddress(overrides?: CallOverrides): Promise<[string]>;

    getFoundersKeyPlaceholderAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMinimumNaffleDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinimumPaidTicketPriceInWei(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumPaidTicketSpots(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNaffleById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NaffleTypes.L1NaffleStructOutput]>;

    getZkSyncAddress(overrides?: CallOverrides): Promise<[string]>;

    getZkSyncNaffleContractAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  _getNaffleById(
    _naffleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NaffleTypes.L1NaffleStructOutput>;

  getAdminRole(overrides?: CallOverrides): Promise<string>;

  getFoundersKeyAddress(overrides?: CallOverrides): Promise<string>;

  getFoundersKeyPlaceholderAddress(overrides?: CallOverrides): Promise<string>;

  getMinimumNaffleDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getMinimumPaidTicketPriceInWei(overrides?: CallOverrides): Promise<BigNumber>;

  getMinimumPaidTicketSpots(overrides?: CallOverrides): Promise<BigNumber>;

  getNaffleById(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NaffleTypes.L1NaffleStructOutput>;

  getZkSyncAddress(overrides?: CallOverrides): Promise<string>;

  getZkSyncNaffleContractAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _getNaffleById(
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NaffleTypes.L1NaffleStructOutput>;

    getAdminRole(overrides?: CallOverrides): Promise<string>;

    getFoundersKeyAddress(overrides?: CallOverrides): Promise<string>;

    getFoundersKeyPlaceholderAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    getMinimumNaffleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumPaidTicketPriceInWei(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumPaidTicketSpots(overrides?: CallOverrides): Promise<BigNumber>;

    getNaffleById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NaffleTypes.L1NaffleStructOutput>;

    getZkSyncAddress(overrides?: CallOverrides): Promise<string>;

    getZkSyncNaffleContractAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "L1NaffleCancelled(uint256)"(naffleId?: null): L1NaffleCancelledEventFilter;
    L1NaffleCancelled(naffleId?: null): L1NaffleCancelledEventFilter;

    "L1NaffleCreated(uint256,address,address,uint256,uint256,uint256,uint256,uint8,uint8)"(
      naffleId?: null,
      owner?: PromiseOrValue<string> | null,
      ethTokenAddress?: PromiseOrValue<string> | null,
      nftId?: null,
      paidTicketSpots?: null,
      ticketPriceInWei?: null,
      endTime?: null,
      naffleType?: null,
      tokenContractType?: null
    ): L1NaffleCreatedEventFilter;
    L1NaffleCreated(
      naffleId?: null,
      owner?: PromiseOrValue<string> | null,
      ethTokenAddress?: PromiseOrValue<string> | null,
      nftId?: null,
      paidTicketSpots?: null,
      ticketPriceInWei?: null,
      endTime?: null,
      naffleType?: null,
      tokenContractType?: null
    ): L1NaffleCreatedEventFilter;

    "L1NaffleWinnerSet(uint256,address)"(
      naffleId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null
    ): L1NaffleWinnerSetEventFilter;
    L1NaffleWinnerSet(
      naffleId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null
    ): L1NaffleWinnerSetEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    _getNaffleById(
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdminRole(overrides?: CallOverrides): Promise<BigNumber>;

    getFoundersKeyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getFoundersKeyPlaceholderAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumNaffleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumPaidTicketPriceInWei(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumPaidTicketSpots(overrides?: CallOverrides): Promise<BigNumber>;

    getNaffleById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getZkSyncAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getZkSyncNaffleContractAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getNaffleById(
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdminRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFoundersKeyAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFoundersKeyPlaceholderAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumNaffleDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumPaidTicketPriceInWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumPaidTicketSpots(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNaffleById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getZkSyncAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getZkSyncNaffleContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
