/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  L1MessengerMock,
  L1MessengerMockInterface,
} from "../../../../contracts/mocks/zksync/L1MessengerMock";

const _abi = [
  {
    inputs: [],
    name: "NotAllowed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "L1MessageSent",
    type: "event",
  },
  {
    inputs: [],
    name: "called",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "sendToL1",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x0002000000000002000100000001035500000060011002700000002b0010019d0000008001000039000000400010043f00000001012001900000002a0000c13d0000000001000031000000040110008c000000750000413d0000000101000367000000000101043b000000e0011002700000002d0210009c000000360000613d0000002e0110009c000000750000c13d0000000001000416000000000110004c000000750000c13d000000040100008a00000000011000310000002f02000041000000000310004c000000000300001900000000030240190000002f01100197000000000410004c000000000200a0190000002f0110009c00000000010300190000000001026019000000000110004c000000750000c13d000000000100041a000000ff011001900000000001000019000000010100c039000000800010043f0000003501000041000000a90001042e0000000001000416000000000110004c000000750000c13d000001000100008a000000000200041a000000000112016f000000000010041b0000002001000039000001000010044300000120000004430000002c01000041000000a90001042e0000000001000416000000000110004c000000750000c13d0000000001000031000000040210008a0000002f03000041000000200420008c000000000400001900000000040340190000002f02200197000000000520004c000000000300a0190000002f0220009c00000000020400190000000002036019000000000220004c000000750000c13d00000001020003670000000403200370000000000303043b000000300430009c000000750000213d00000023043000390000002f05000041000000000614004b000000000600001900000000060580190000002f011001970000002f04400197000000000714004b0000000005008019000000000114013f0000002f0110009c00000000010600190000000001056019000000000110004c000000750000c13d0000000401300039000000000112034f000000000101043b000000310210009c000000770000813d0000001f02100039000000200400008a000000000242016f0000003f02200039000000000442016f000000400200043d0000000004420019000000000524004b00000000050000190000000105004039000000300640009c000000770000213d0000000105500190000000770000c13d000000400040043f0000000002120436000000240430003900000000034100190000000005000031000000000353004b0000007d0000a13d0000000001000019000000aa00010430000000330100004100000000001004350000004101000039000000040010043f0000003401000041000000aa000104300000001f0310018f000000010440036700000005051002720000008a0000613d000000000600001900000005076002100000000008720019000000000774034f000000000707043b00000000007804350000000106600039000000000756004b000000820000413d000000000630004c000000990000613d0000000505500210000000000454034f00000000055200190000000303300210000000000605043300000000063601cf000000000636022f000000000404043b0000010003300089000000000434022f00000000033401cf000000000363019f000000000035043500000000011200190000000000010435000001000100008a000000000200041a000000000112016f00000001011001bf000000000010041b000000400100043d00000000000104350000002b020000410000002b0310009c0000000001028019000000400110021000000032011001c7000000a90001042e000000a800000432000000a90001042e000000aa00010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000002000000000000000000000000000000400000010000000000000000000000000000000000000000000000000000000000000000000000000062f84b240000000000000000000000000000000000000000000000000000000050f9b6cd8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000200000000000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000020000000800000000000000000dc530b23c68a6955abbc2bf8995965cdbec0fe9ed0c3f613bec91620bb3e2e2f";

type L1MessengerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: L1MessengerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class L1MessengerMock__factory extends ContractFactory {
  constructor(...args: L1MessengerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<L1MessengerMock> {
    return super.deploy(overrides || {}) as Promise<L1MessengerMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): L1MessengerMock {
    return super.attach(address) as L1MessengerMock;
  }
  override connect(signer: Signer): L1MessengerMock__factory {
    return super.connect(signer) as L1MessengerMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): L1MessengerMockInterface {
    return new utils.Interface(_abi) as L1MessengerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L1MessengerMock {
    return new Contract(address, _abi, signerOrProvider) as L1MessengerMock;
  }
}
