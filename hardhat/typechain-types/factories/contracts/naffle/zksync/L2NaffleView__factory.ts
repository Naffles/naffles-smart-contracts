/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  L2NaffleView,
  L2NaffleViewInterface,
} from "../../../../contracts/naffle/zksync/L2NaffleView";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFunds",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
    ],
    name: "InvalidEndTime",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "naffleId",
        type: "uint256",
      },
    ],
    name: "InvalidNaffleId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum NaffleTypes.NaffleStatus",
        name: "status",
        type: "uint8",
      },
    ],
    name: "InvalidNaffleStatus",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum NaffleTypes.NaffleType",
        name: "naffleType",
        type: "uint8",
      },
    ],
    name: "InvalidNaffleType",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
    ],
    name: "NaffleNotEndedYet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
    ],
    name: "NaffleNotFinished",
    type: "error",
  },
  {
    inputs: [],
    name: "NaffleSoldOut",
    type: "error",
  },
  {
    inputs: [],
    name: "NoTicketsBought",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NotEnoughFunds",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NotEnoughOpenEntryTicketSpots",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NotEnoughPaidTicketSpots",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "NotNaffleOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "OpenTicketRatioCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "RandomNumberAlreadyRequested",
    type: "error",
  },
  {
    inputs: [],
    name: "UnableToSendFunds",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "naffleId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
    ],
    name: "L2NaffleCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "naffleId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "ethTokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "paidTicketSpots",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "openEntryTicketSpots",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ticketPriceInWei",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "enum NaffleTypes.NaffleType",
        name: "naffleType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "enum NaffleTypes.TokenContractType",
        name: "tokenContractType",
        type: "uint8",
      },
    ],
    name: "L2NaffleCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "naffleId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "winningTicketIdOnNaffle",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
    ],
    name: "L2NaffleFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "naffleId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newEndTime",
        type: "uint256",
      },
    ],
    name: "L2NafflePostponed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "naffleId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ticketIds",
        type: "uint256[]",
      },
    ],
    name: "OpenEntryTicketsUsed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "naffleId",
        type: "uint256",
      },
    ],
    name: "RandomNumberRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "previousAdminRole",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "newAdminRole",
        type: "bytes32",
      },
    ],
    name: "RoleAdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "RoleGranted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "RoleRevoked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "naffleId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ticketIds",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ticketPriceInWei",
        type: "uint256",
      },
    ],
    name: "TicketsBought",
    type: "event",
  },
  {
    inputs: [],
    name: "getAdminRole",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getL1NaffleContractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMaxPostponeTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "getNaffleById",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "ethTokenAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "naffleId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nftId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "paidTicketSpots",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "openEntryTicketSpots",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numberOfPaidTickets",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numberOfOpenEntries",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ticketPriceInWei",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "winningTicketId",
            type: "uint256",
          },
          {
            internalType: "enum NaffleTypes.TicketType",
            name: "winningTicketType",
            type: "uint8",
          },
          {
            internalType: "enum NaffleTypes.NaffleStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "enum NaffleTypes.TokenContractType",
            name: "naffleTokenType",
            type: "uint8",
          },
          {
            internalType: "enum NaffleTypes.NaffleType",
            name: "naffleType",
            type: "uint8",
          },
        ],
        internalType: "struct NaffleTypes.L2Naffle",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOpenEntryRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOpenEntryTicketContractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPaidTicketContractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPlatformFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061068f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636b0c47bd1161005b5780636b0c47bd146100fd5780636ea8bc1014610105578063b3ecf2361461010d578063c7f6265f1461011457600080fd5b80631b1572e51461008d5780632995e4d1146100bf5780634025572f146100df5780636497dd1a146100e7575b600080fd5b61009561011c565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100d26100cd3660046104dc565b610161565b6040516100b69190610558565b610095610178565b6100ef6101b8565b6040519081526020016100b6565b6100956101e2565b6100ef610222565b60006100ef565b6100ef61024c565b600061015c7f02c0f6ea35402fd9c5779ec907d98e3386cbf20055e86ccc8f3265ae1f5065a05473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b61016961042a565b61017282610276565b92915050565b600061015c7f02c0f6ea35402fd9c5779ec907d98e3386cbf20055e86ccc8f3265ae1f50659e5473ffffffffffffffffffffffffffffffffffffffff1690565b600061015c7f02c0f6ea35402fd9c5779ec907d98e3386cbf20055e86ccc8f3265ae1f5065a45490565b600061015c7f02c0f6ea35402fd9c5779ec907d98e3386cbf20055e86ccc8f3265ae1f5065a15473ffffffffffffffffffffffffffffffffffffffff1690565b600061015c7f02c0f6ea35402fd9c5779ec907d98e3386cbf20055e86ccc8f3265ae1f5065a35490565b600061015c7f02c0f6ea35402fd9c5779ec907d98e3386cbf20055e86ccc8f3265ae1f5065a25490565b61027e61042a565b60008281527f02c0f6ea35402fd9c5779ec907d98e3386cbf20055e86ccc8f3265ae1f5065a5602090815260409182902082516101e081018452815473ffffffffffffffffffffffffffffffffffffffff908116825260018301541692810192909252600280820154938301939093526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154610140830152600b8101549192909161016084019160ff90911690811115610365576103656104f5565b6002811115610376576103766104f5565b8152602001600b820160019054906101000a900460ff16600481111561039e5761039e6104f5565b60048111156103af576103af6104f5565b8152602001600b820160029054906101000a900460ff1660018111156103d7576103d76104f5565b60018111156103e8576103e86104f5565b8152602001600b820160039054906101000a900460ff166001811115610410576104106104f5565b6001811115610421576104216104f5565b90525092915050565b604051806101e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600060028111156104c2576104c26104f5565b815260200160008152602001600081526020016000905290565b6000602082840312156104ee57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610534576105346104f5565b9052565b60058110610534576105346104f5565b60028110610534576105346104f5565b815173ffffffffffffffffffffffffffffffffffffffff1681526101e08101602083015161059e602084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015181840152506101408084015181840152506101608084015161061282850182610524565b50506101808084015161062782850182610538565b50506101a08084015161063c82850182610548565b50506101c08084015161065182850182610548565b50509291505056fea2646970667358221220520f4e6dbf7936f3b0f64ba9756ad2a08369f2a8a9105fe5c4373bfc2144dcdf64736f6c63430008110033";

type L2NaffleViewConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: L2NaffleViewConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class L2NaffleView__factory extends ContractFactory {
  constructor(...args: L2NaffleViewConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<L2NaffleView> {
    return super.deploy(overrides || {}) as Promise<L2NaffleView>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): L2NaffleView {
    return super.attach(address) as L2NaffleView;
  }
  override connect(signer: Signer): L2NaffleView__factory {
    return super.connect(signer) as L2NaffleView__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): L2NaffleViewInterface {
    return new utils.Interface(_abi) as L2NaffleViewInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L2NaffleView {
    return new Contract(address, _abi, signerOrProvider) as L2NaffleView;
  }
}
