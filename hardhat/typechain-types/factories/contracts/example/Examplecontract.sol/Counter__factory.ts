/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Counter,
  CounterInterface,
} from "../../../../contracts/example/Examplecontract.sol/Counter";

const _abi = [
  {
    inputs: [],
    name: "get",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x000200000000000200010000000103550000006001100270000000170010019d0000008001000039000000400010043f0000000101200190000000270000c13d0000000001000031000000040110008c000000400000413d0000000101000367000000000101043b000000e001100270000000190210009c0000002f0000613d0000001a0110009c000000400000c13d0000000001000416000000000110004c000000400000c13d000000040100008a00000000011000310000001b02000041000000000310004c000000000300001900000000030240190000001b01100197000000000410004c000000000200a0190000001b0110009c00000000010300190000000001026019000000000110004c000000400000c13d000000000100041a000000800010043f0000001e01000041000000560001042e0000000001000416000000000110004c000000400000c13d0000002001000039000001000010044300000120000004430000001801000041000000560001042e0000000001000416000000000110004c000000400000c13d000000040100008a00000000011000310000001b02000041000000200310008c000000000300001900000000030240190000001b01100197000000000410004c000000000200a0190000001b0110009c00000000010300190000000001026019000000000110004c000000420000613d0000000001000019000000570001043000000004010000390000000101100367000000000201043b000000000100041a0000000001120019000000000221004b000000000200001900000001020040390000000102200190000000520000613d0000001c0100004100000000001004350000001101000039000000040010043f0000001d010000410000005700010430000000000010041b0000000001000019000000560001042e0000005500000432000000560001042e0000005700010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000040000001000000000000000000000000000000000000000000000000000000000000000000000000007cf5dab0000000000000000000000000000000000000000000000000000000006d4ce63c80000000000000000000000000000000000000000000000000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000020000000800000000000000000000000000000000000000000000000000000000000000000000000000000000067affed7b4e8da3828f2af0e9ac6786a1b62d5a41e136f6f1d8b6b11d49a201c";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Counter> {
    return super.deploy(overrides || {}) as Promise<Counter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  override connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
