/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestValueFacet,
  TestValueFacetInterface,
} from "../../../contracts/example/TestValueFacet";

const _abi = [
  {
    inputs: [],
    name: "getValue",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "setValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061042f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063209652551461003b57806393a0935214610059575b600080fd5b61004361006e565b6040516100509190610169565b60405180910390f35b61006c6100673660046101e6565b61007d565b005b6060610078610089565b905090565b6100868161013a565b50565b60607ff7bb98fc2195e88707e2dbfb704e0976fe25b152a118a5725d62d104f388c7f880546100b790610297565b80601f01602080910402602001604051908101604052809291908181526020018280546100e390610297565b80156101305780601f1061010557610100808354040283529160200191610130565b820191906000526020600020905b81548152906001019060200180831161011357829003601f168201915b5050505050905090565b7ff7bb98fc2195e88707e2dbfb704e0976fe25b152a118a5725d62d104f388c7f86101658282610339565b5050565b600060208083528351808285015260005b818110156101965785810183015185820160400152820161017a565b506000604082860101526040601f19601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156101f857600080fd5b813567ffffffffffffffff8082111561021057600080fd5b818401915084601f83011261022457600080fd5b813581811115610236576102366101b7565b604051601f8201601f19908116603f0116810190838211818310171561025e5761025e6101b7565b8160405282815287602084870101111561027757600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c908216806102ab57607f821691505b6020821081036102e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561033457600081815260208120601f850160051c810160208610156103115750805b601f850160051c820191505b818110156103305782815560010161031d565b5050505b505050565b815167ffffffffffffffff811115610353576103536101b7565b610367816103618454610297565b846102ea565b602080601f83116001811461039c57600084156103845750858301515b600019600386901b1c1916600185901b178555610330565b600085815260208120601f198616915b828110156103cb578886015182559484019460019091019084016103ac565b50858210156103e95787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212207eca4aab4d4a0292a4eea64878029ee26e877d73aade98feac51810c6c8e595e64736f6c63430008110033";

type TestValueFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestValueFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestValueFacet__factory extends ContractFactory {
  constructor(...args: TestValueFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestValueFacet> {
    return super.deploy(overrides || {}) as Promise<TestValueFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestValueFacet {
    return super.attach(address) as TestValueFacet;
  }
  override connect(signer: Signer): TestValueFacet__factory {
    return super.connect(signer) as TestValueFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestValueFacetInterface {
    return new utils.Interface(_abi) as TestValueFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestValueFacet {
    return new Contract(address, _abi, signerOrProvider) as TestValueFacet;
  }
}
