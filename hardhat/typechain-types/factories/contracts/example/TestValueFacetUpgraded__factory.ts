/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestValueFacetUpgraded,
  TestValueFacetUpgradedInterface,
} from "../../../contracts/example/TestValueFacetUpgraded";

const _abi = [
  {
    inputs: [],
    name: "getSecondValue",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getValue",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "setSecondValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "setValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506104cf806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063209652551461005157806393a093521461006f578063b98b96e014610084578063e695c89114610097575b600080fd5b61005961009f565b6040516100669190610209565b60405180910390f35b61008261007d366004610286565b6100ae565b005b610082610092366004610286565b6100ba565b6100596100c3565b60606100a96100cd565b905090565b6100b78161017e565b50565b6100b7816101ad565b60606100a96101d8565b60607ff7bb98fc2195e88707e2dbfb704e0976fe25b152a118a5725d62d104f388c7f880546100fb90610337565b80601f016020809104026020016040519081016040528092919081815260200182805461012790610337565b80156101745780601f1061014957610100808354040283529160200191610174565b820191906000526020600020905b81548152906001019060200180831161015757829003601f168201915b5050505050905090565b7ff7bb98fc2195e88707e2dbfb704e0976fe25b152a118a5725d62d104f388c7f86101a982826103d9565b5050565b7ff7bb98fc2195e88707e2dbfb704e0976fe25b152a118a5725d62d104f388c7f96101a982826103d9565b60607ff7bb98fc2195e88707e2dbfb704e0976fe25b152a118a5725d62d104f388c7f860010180546100fb90610337565b600060208083528351808285015260005b818110156102365785810183015185820160400152820161021a565b506000604082860101526040601f19601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561029857600080fd5b813567ffffffffffffffff808211156102b057600080fd5b818401915084601f8301126102c457600080fd5b8135818111156102d6576102d6610257565b604051601f8201601f19908116603f011681019083821181831017156102fe576102fe610257565b8160405282815287602084870101111561031757600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061034b57607f821691505b602082108103610384577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156103d457600081815260208120601f850160051c810160208610156103b15750805b601f850160051c820191505b818110156103d0578281556001016103bd565b5050505b505050565b815167ffffffffffffffff8111156103f3576103f3610257565b610407816104018454610337565b8461038a565b602080601f83116001811461043c57600084156104245750858301515b600019600386901b1c1916600185901b1785556103d0565b600085815260208120601f198616915b8281101561046b5788860151825594840194600190910190840161044c565b50858210156104895787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122091d4435169ba46de7a28af71d80f0dc0200bdf7aa423e368527aa8986f4dee4d64736f6c63430008110033";

type TestValueFacetUpgradedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestValueFacetUpgradedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestValueFacetUpgraded__factory extends ContractFactory {
  constructor(...args: TestValueFacetUpgradedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestValueFacetUpgraded> {
    return super.deploy(overrides || {}) as Promise<TestValueFacetUpgraded>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestValueFacetUpgraded {
    return super.attach(address) as TestValueFacetUpgraded;
  }
  override connect(signer: Signer): TestValueFacetUpgraded__factory {
    return super.connect(signer) as TestValueFacetUpgraded__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestValueFacetUpgradedInterface {
    return new utils.Interface(_abi) as TestValueFacetUpgradedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestValueFacetUpgraded {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestValueFacetUpgraded;
  }
}
