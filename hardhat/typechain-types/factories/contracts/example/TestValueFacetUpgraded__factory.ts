/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestValueFacetUpgraded,
  TestValueFacetUpgradedInterface,
} from "../../../contracts/example/TestValueFacetUpgraded";

const _abi = [
  {
    inputs: [],
    name: "getSecondValue",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getValue",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "setSecondValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "setValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type TestValueFacetUpgradedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestValueFacetUpgradedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestValueFacetUpgraded__factory extends ContractFactory {
  constructor(...args: TestValueFacetUpgradedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestValueFacetUpgraded> {
    return super.deploy(overrides || {}) as Promise<TestValueFacetUpgraded>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestValueFacetUpgraded {
    return super.attach(address) as TestValueFacetUpgraded;
  }
  override connect(signer: Signer): TestValueFacetUpgraded__factory {
    return super.connect(signer) as TestValueFacetUpgraded__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestValueFacetUpgradedInterface {
    return new utils.Interface(_abi) as TestValueFacetUpgradedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestValueFacetUpgraded {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestValueFacetUpgraded;
  }
}
