/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  AddressUtils,
  AddressUtilsInterface,
} from "../../../../@solidstate/contracts/utils/AddressUtils";

const _abi = [
  {
    inputs: [],
    name: "AddressUtils__InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressUtils__NotContract",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressUtils__SendValueFailed",
    type: "error",
  },
] as const;

const _bytecode =
  "0x00000001012001900000000c0000613d0000008001000039000000400010043f0000000001000416000000000110004c0000000c0000c13d00000020010000390000010000100443000001200000044300000005010000410000000f0001042e000000000100001900000010000104300000000e000004320000000f0001042e00000010000104300000000000000000000000000000000000000000000000000000000200000000000000000000000000000040000001000000000000000000e92dca010795dcc8c01b0cb0770044a4e0f99a5b3c900759c1da3b8c41a617cd";

type AddressUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressUtils__factory extends ContractFactory {
  constructor(...args: AddressUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AddressUtils> {
    return super.deploy(overrides || {}) as Promise<AddressUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AddressUtils {
    return super.attach(address) as AddressUtils;
  }
  override connect(signer: Signer): AddressUtils__factory {
    return super.connect(signer) as AddressUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressUtilsInterface {
    return new utils.Interface(_abi) as AddressUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressUtils {
    return new Contract(address, _abi, signerOrProvider) as AddressUtils;
  }
}
