/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export declare namespace IAllowList {
  export type DepositStruct = {
    depositLimitation: PromiseOrValue<boolean>;
    depositCap: PromiseOrValue<BigNumberish>;
  };

  export type DepositStructOutput = [boolean, BigNumber] & {
    depositLimitation: boolean;
    depositCap: BigNumber;
  };
}

export interface IAllowListInterface extends utils.Interface {
  functions: {
    "canCall(address,address,bytes4)": FunctionFragment;
    "getAccessMode(address)": FunctionFragment;
    "getTokenDepositLimitData(address)": FunctionFragment;
    "hasSpecialAccessToCall(address,address,bytes4)": FunctionFragment;
    "setAccessMode(address,uint8)": FunctionFragment;
    "setBatchAccessMode(address[],uint8[])": FunctionFragment;
    "setBatchPermissionToCall(address[],address[],bytes4[],bool[])": FunctionFragment;
    "setDepositLimit(address,bool,uint256)": FunctionFragment;
    "setPermissionToCall(address,address,bytes4,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canCall"
      | "getAccessMode"
      | "getTokenDepositLimitData"
      | "hasSpecialAccessToCall"
      | "setAccessMode"
      | "setBatchAccessMode"
      | "setBatchPermissionToCall"
      | "setDepositLimit"
      | "setPermissionToCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessMode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDepositLimitData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSpecialAccessToCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessMode",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchAccessMode",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchPermissionToCall",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionToCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccessMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDepositLimitData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSpecialAccessToCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchAccessMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchPermissionToCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionToCall",
    data: BytesLike
  ): Result;

  events: {
    "UpdateAccessMode(address,uint8,uint8)": EventFragment;
    "UpdateCallPermission(address,address,bytes4,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateAccessMode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCallPermission"): EventFragment;
}

export interface UpdateAccessModeEventObject {
  target: string;
  previousMode: number;
  newMode: number;
}
export type UpdateAccessModeEvent = TypedEvent<
  [string, number, number],
  UpdateAccessModeEventObject
>;

export type UpdateAccessModeEventFilter =
  TypedEventFilter<UpdateAccessModeEvent>;

export interface UpdateCallPermissionEventObject {
  caller: string;
  target: string;
  functionSig: string;
  status: boolean;
}
export type UpdateCallPermissionEvent = TypedEvent<
  [string, string, string, boolean],
  UpdateCallPermissionEventObject
>;

export type UpdateCallPermissionEventFilter =
  TypedEventFilter<UpdateCallPermissionEvent>;

export interface IAllowList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAllowListInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAccessMode(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTokenDepositLimitData(
      _l1Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IAllowList.DepositStructOutput]>;

    hasSpecialAccessToCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAccessMode(
      _target: PromiseOrValue<string>,
      _accessMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBatchAccessMode(
      _targets: PromiseOrValue<string>[],
      _accessMode: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBatchPermissionToCall(
      _callers: PromiseOrValue<string>[],
      _targets: PromiseOrValue<string>[],
      _functionSigs: PromiseOrValue<BytesLike>[],
      _enables: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositLimit(
      _l1Token: PromiseOrValue<string>,
      _depositLimitation: PromiseOrValue<boolean>,
      _depositCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPermissionToCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      _enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canCall(
    _caller: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _functionSig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAccessMode(
    _target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getTokenDepositLimitData(
    _l1Token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IAllowList.DepositStructOutput>;

  hasSpecialAccessToCall(
    _caller: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _functionSig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAccessMode(
    _target: PromiseOrValue<string>,
    _accessMode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBatchAccessMode(
    _targets: PromiseOrValue<string>[],
    _accessMode: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBatchPermissionToCall(
    _callers: PromiseOrValue<string>[],
    _targets: PromiseOrValue<string>[],
    _functionSigs: PromiseOrValue<BytesLike>[],
    _enables: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositLimit(
    _l1Token: PromiseOrValue<string>,
    _depositLimitation: PromiseOrValue<boolean>,
    _depositCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPermissionToCall(
    _caller: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _functionSig: PromiseOrValue<BytesLike>,
    _enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAccessMode(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getTokenDepositLimitData(
      _l1Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IAllowList.DepositStructOutput>;

    hasSpecialAccessToCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAccessMode(
      _target: PromiseOrValue<string>,
      _accessMode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBatchAccessMode(
      _targets: PromiseOrValue<string>[],
      _accessMode: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBatchPermissionToCall(
      _callers: PromiseOrValue<string>[],
      _targets: PromiseOrValue<string>[],
      _functionSigs: PromiseOrValue<BytesLike>[],
      _enables: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositLimit(
      _l1Token: PromiseOrValue<string>,
      _depositLimitation: PromiseOrValue<boolean>,
      _depositCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionToCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      _enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "UpdateAccessMode(address,uint8,uint8)"(
      target?: PromiseOrValue<string> | null,
      previousMode?: null,
      newMode?: null
    ): UpdateAccessModeEventFilter;
    UpdateAccessMode(
      target?: PromiseOrValue<string> | null,
      previousMode?: null,
      newMode?: null
    ): UpdateAccessModeEventFilter;

    "UpdateCallPermission(address,address,bytes4,bool)"(
      caller?: PromiseOrValue<string> | null,
      target?: PromiseOrValue<string> | null,
      functionSig?: PromiseOrValue<BytesLike> | null,
      status?: null
    ): UpdateCallPermissionEventFilter;
    UpdateCallPermission(
      caller?: PromiseOrValue<string> | null,
      target?: PromiseOrValue<string> | null,
      functionSig?: PromiseOrValue<BytesLike> | null,
      status?: null
    ): UpdateCallPermissionEventFilter;
  };

  estimateGas: {
    canCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccessMode(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenDepositLimitData(
      _l1Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSpecialAccessToCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAccessMode(
      _target: PromiseOrValue<string>,
      _accessMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBatchAccessMode(
      _targets: PromiseOrValue<string>[],
      _accessMode: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBatchPermissionToCall(
      _callers: PromiseOrValue<string>[],
      _targets: PromiseOrValue<string>[],
      _functionSigs: PromiseOrValue<BytesLike>[],
      _enables: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositLimit(
      _l1Token: PromiseOrValue<string>,
      _depositLimitation: PromiseOrValue<boolean>,
      _depositCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPermissionToCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      _enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccessMode(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenDepositLimitData(
      _l1Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSpecialAccessToCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAccessMode(
      _target: PromiseOrValue<string>,
      _accessMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBatchAccessMode(
      _targets: PromiseOrValue<string>[],
      _accessMode: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBatchPermissionToCall(
      _callers: PromiseOrValue<string>[],
      _targets: PromiseOrValue<string>[],
      _functionSigs: PromiseOrValue<BytesLike>[],
      _enables: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositLimit(
      _l1Token: PromiseOrValue<string>,
      _depositLimitation: PromiseOrValue<boolean>,
      _depositCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPermissionToCall(
      _caller: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _functionSig: PromiseOrValue<BytesLike>,
      _enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
