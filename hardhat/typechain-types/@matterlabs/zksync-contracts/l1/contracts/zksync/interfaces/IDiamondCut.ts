/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export declare namespace Diamond {
  export type FacetCutStruct = {
    facet: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    isFreezable: PromiseOrValue<boolean>;
    selectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, boolean, string[]] & {
    facet: string;
    action: number;
    isFreezable: boolean;
    selectors: string[];
  };

  export type DiamondCutDataStruct = {
    facetCuts: Diamond.FacetCutStruct[];
    initAddress: PromiseOrValue<string>;
    initCalldata: PromiseOrValue<BytesLike>;
  };

  export type DiamondCutDataStructOutput = [
    Diamond.FacetCutStructOutput[],
    string,
    string
  ] & {
    facetCuts: Diamond.FacetCutStructOutput[];
    initAddress: string;
    initCalldata: string;
  };
}

export interface IDiamondCutInterface extends utils.Interface {
  functions: {
    "cancelUpgradeProposal(bytes32)": FunctionFragment;
    "executeUpgrade(((address,uint8,bool,bytes4[])[],address,bytes),bytes32)": FunctionFragment;
    "freezeDiamond()": FunctionFragment;
    "proposeShadowUpgrade(bytes32,uint40)": FunctionFragment;
    "proposeTransparentUpgrade(((address,uint8,bool,bytes4[])[],address,bytes),uint40)": FunctionFragment;
    "securityCouncilUpgradeApprove(bytes32)": FunctionFragment;
    "unfreezeDiamond()": FunctionFragment;
    "upgradeProposalHash(((address,uint8,bool,bytes4[])[],address,bytes),uint256,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelUpgradeProposal"
      | "executeUpgrade"
      | "freezeDiamond"
      | "proposeShadowUpgrade"
      | "proposeTransparentUpgrade"
      | "securityCouncilUpgradeApprove"
      | "unfreezeDiamond"
      | "upgradeProposalHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelUpgradeProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUpgrade",
    values: [Diamond.DiamondCutDataStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeShadowUpgrade",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeTransparentUpgrade",
    values: [Diamond.DiamondCutDataStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "securityCouncilUpgradeApprove",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProposalHash",
    values: [
      Diamond.DiamondCutDataStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelUpgradeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeShadowUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeTransparentUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "securityCouncilUpgradeApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProposalHash",
    data: BytesLike
  ): Result;

  events: {
    "CancelUpgradeProposal(uint256,bytes32)": EventFragment;
    "ExecuteUpgrade(uint256,bytes32,bytes32)": EventFragment;
    "Freeze()": EventFragment;
    "ProposeShadowUpgrade(uint256,bytes32)": EventFragment;
    "ProposeTransparentUpgrade(tuple,uint256,bytes32)": EventFragment;
    "SecurityCouncilUpgradeApprove(uint256,bytes32)": EventFragment;
    "Unfreeze()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelUpgradeProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteUpgrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Freeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeShadowUpgrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeTransparentUpgrade"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SecurityCouncilUpgradeApprove"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfreeze"): EventFragment;
}

export interface CancelUpgradeProposalEventObject {
  proposalId: BigNumber;
  proposalHash: string;
}
export type CancelUpgradeProposalEvent = TypedEvent<
  [BigNumber, string],
  CancelUpgradeProposalEventObject
>;

export type CancelUpgradeProposalEventFilter =
  TypedEventFilter<CancelUpgradeProposalEvent>;

export interface ExecuteUpgradeEventObject {
  proposalId: BigNumber;
  proposalHash: string;
  proposalSalt: string;
}
export type ExecuteUpgradeEvent = TypedEvent<
  [BigNumber, string, string],
  ExecuteUpgradeEventObject
>;

export type ExecuteUpgradeEventFilter = TypedEventFilter<ExecuteUpgradeEvent>;

export interface FreezeEventObject {}
export type FreezeEvent = TypedEvent<[], FreezeEventObject>;

export type FreezeEventFilter = TypedEventFilter<FreezeEvent>;

export interface ProposeShadowUpgradeEventObject {
  proposalId: BigNumber;
  proposalHash: string;
}
export type ProposeShadowUpgradeEvent = TypedEvent<
  [BigNumber, string],
  ProposeShadowUpgradeEventObject
>;

export type ProposeShadowUpgradeEventFilter =
  TypedEventFilter<ProposeShadowUpgradeEvent>;

export interface ProposeTransparentUpgradeEventObject {
  diamondCut: Diamond.DiamondCutDataStructOutput;
  proposalId: BigNumber;
  proposalSalt: string;
}
export type ProposeTransparentUpgradeEvent = TypedEvent<
  [Diamond.DiamondCutDataStructOutput, BigNumber, string],
  ProposeTransparentUpgradeEventObject
>;

export type ProposeTransparentUpgradeEventFilter =
  TypedEventFilter<ProposeTransparentUpgradeEvent>;

export interface SecurityCouncilUpgradeApproveEventObject {
  proposalId: BigNumber;
  proposalHash: string;
}
export type SecurityCouncilUpgradeApproveEvent = TypedEvent<
  [BigNumber, string],
  SecurityCouncilUpgradeApproveEventObject
>;

export type SecurityCouncilUpgradeApproveEventFilter =
  TypedEventFilter<SecurityCouncilUpgradeApproveEvent>;

export interface UnfreezeEventObject {}
export type UnfreezeEvent = TypedEvent<[], UnfreezeEventObject>;

export type UnfreezeEventFilter = TypedEventFilter<UnfreezeEvent>;

export interface IDiamondCut extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDiamondCutInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelUpgradeProposal(
      _proposedUpgradeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeShadowUpgrade(
      _proposalHash: PromiseOrValue<BytesLike>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeTransparentUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    securityCouncilUpgradeApprove(
      _upgradeProposalHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeProposalHash(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  cancelUpgradeProposal(
    _proposedUpgradeHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeUpgrade(
    _diamondCut: Diamond.DiamondCutDataStruct,
    _proposalSalt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freezeDiamond(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeShadowUpgrade(
    _proposalHash: PromiseOrValue<BytesLike>,
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeTransparentUpgrade(
    _diamondCut: Diamond.DiamondCutDataStruct,
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  securityCouncilUpgradeApprove(
    _upgradeProposalHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unfreezeDiamond(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeProposalHash(
    _diamondCut: Diamond.DiamondCutDataStruct,
    _proposalId: PromiseOrValue<BigNumberish>,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    cancelUpgradeProposal(
      _proposedUpgradeHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalSalt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    freezeDiamond(overrides?: CallOverrides): Promise<void>;

    proposeShadowUpgrade(
      _proposalHash: PromiseOrValue<BytesLike>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeTransparentUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    securityCouncilUpgradeApprove(
      _upgradeProposalHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unfreezeDiamond(overrides?: CallOverrides): Promise<void>;

    upgradeProposalHash(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "CancelUpgradeProposal(uint256,bytes32)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): CancelUpgradeProposalEventFilter;
    CancelUpgradeProposal(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): CancelUpgradeProposalEventFilter;

    "ExecuteUpgrade(uint256,bytes32,bytes32)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null,
      proposalSalt?: null
    ): ExecuteUpgradeEventFilter;
    ExecuteUpgrade(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null,
      proposalSalt?: null
    ): ExecuteUpgradeEventFilter;

    "Freeze()"(): FreezeEventFilter;
    Freeze(): FreezeEventFilter;

    "ProposeShadowUpgrade(uint256,bytes32)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): ProposeShadowUpgradeEventFilter;
    ProposeShadowUpgrade(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): ProposeShadowUpgradeEventFilter;

    "ProposeTransparentUpgrade(tuple,uint256,bytes32)"(
      diamondCut?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalSalt?: null
    ): ProposeTransparentUpgradeEventFilter;
    ProposeTransparentUpgrade(
      diamondCut?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalSalt?: null
    ): ProposeTransparentUpgradeEventFilter;

    "SecurityCouncilUpgradeApprove(uint256,bytes32)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): SecurityCouncilUpgradeApproveEventFilter;
    SecurityCouncilUpgradeApprove(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): SecurityCouncilUpgradeApproveEventFilter;

    "Unfreeze()"(): UnfreezeEventFilter;
    Unfreeze(): UnfreezeEventFilter;
  };

  estimateGas: {
    cancelUpgradeProposal(
      _proposedUpgradeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeShadowUpgrade(
      _proposalHash: PromiseOrValue<BytesLike>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeTransparentUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    securityCouncilUpgradeApprove(
      _upgradeProposalHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeProposalHash(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelUpgradeProposal(
      _proposedUpgradeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeShadowUpgrade(
      _proposalHash: PromiseOrValue<BytesLike>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeTransparentUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    securityCouncilUpgradeApprove(
      _upgradeProposalHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeProposalHash(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
