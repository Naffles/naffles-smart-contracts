/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export type VerifierParamsStruct = {
  recursionNodeLevelVkHash: PromiseOrValue<BytesLike>;
  recursionLeafLevelVkHash: PromiseOrValue<BytesLike>;
  recursionCircuitsSetVksHash: PromiseOrValue<BytesLike>;
};

export type VerifierParamsStructOutput = [string, string, string] & {
  recursionNodeLevelVkHash: string;
  recursionLeafLevelVkHash: string;
  recursionCircuitsSetVksHash: string;
};

export type PriorityOperationStruct = {
  canonicalTxHash: PromiseOrValue<BytesLike>;
  expirationTimestamp: PromiseOrValue<BigNumberish>;
  layer2Tip: PromiseOrValue<BigNumberish>;
};

export type PriorityOperationStructOutput = [string, BigNumber, BigNumber] & {
  canonicalTxHash: string;
  expirationTimestamp: BigNumber;
  layer2Tip: BigNumber;
};

export type L2LogStruct = {
  l2ShardId: PromiseOrValue<BigNumberish>;
  isService: PromiseOrValue<boolean>;
  txNumberInBlock: PromiseOrValue<BigNumberish>;
  sender: PromiseOrValue<string>;
  key: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BytesLike>;
};

export type L2LogStructOutput = [
  number,
  boolean,
  number,
  string,
  string,
  string
] & {
  l2ShardId: number;
  isService: boolean;
  txNumberInBlock: number;
  sender: string;
  key: string;
  value: string;
};

export type L2MessageStruct = {
  txNumberInBlock: PromiseOrValue<BigNumberish>;
  sender: PromiseOrValue<string>;
  data: PromiseOrValue<BytesLike>;
};

export type L2MessageStructOutput = [number, string, string] & {
  txNumberInBlock: number;
  sender: string;
  data: string;
};

export declare namespace IMailbox {
  export type L2CanonicalTransactionStruct = {
    txType: PromiseOrValue<BigNumberish>;
    from: PromiseOrValue<BigNumberish>;
    to: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    gasPerPubdataByteLimit: PromiseOrValue<BigNumberish>;
    maxFeePerGas: PromiseOrValue<BigNumberish>;
    maxPriorityFeePerGas: PromiseOrValue<BigNumberish>;
    paymaster: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    reserved: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    data: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
    factoryDeps: PromiseOrValue<BigNumberish>[];
    paymasterInput: PromiseOrValue<BytesLike>;
    reservedDynamic: PromiseOrValue<BytesLike>;
  };

  export type L2CanonicalTransactionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber],
    string,
    string,
    BigNumber[],
    string,
    string
  ] & {
    txType: BigNumber;
    from: BigNumber;
    to: BigNumber;
    gasLimit: BigNumber;
    gasPerPubdataByteLimit: BigNumber;
    maxFeePerGas: BigNumber;
    maxPriorityFeePerGas: BigNumber;
    paymaster: BigNumber;
    nonce: BigNumber;
    value: BigNumber;
    reserved: [BigNumber, BigNumber, BigNumber, BigNumber];
    data: string;
    signature: string;
    factoryDeps: BigNumber[];
    paymasterInput: string;
    reservedDynamic: string;
  };
}

export declare namespace Diamond {
  export type FacetCutStruct = {
    facet: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    isFreezable: PromiseOrValue<boolean>;
    selectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, boolean, string[]] & {
    facet: string;
    action: number;
    isFreezable: boolean;
    selectors: string[];
  };

  export type DiamondCutDataStruct = {
    facetCuts: Diamond.FacetCutStruct[];
    initAddress: PromiseOrValue<string>;
    initCalldata: PromiseOrValue<BytesLike>;
  };

  export type DiamondCutDataStructOutput = [
    Diamond.FacetCutStructOutput[],
    string,
    string
  ] & {
    facetCuts: Diamond.FacetCutStructOutput[];
    initAddress: string;
    initCalldata: string;
  };
}

export declare namespace IExecutor {
  export type StoredBlockInfoStruct = {
    blockNumber: PromiseOrValue<BigNumberish>;
    blockHash: PromiseOrValue<BytesLike>;
    indexRepeatedStorageChanges: PromiseOrValue<BigNumberish>;
    numberOfLayer1Txs: PromiseOrValue<BigNumberish>;
    priorityOperationsHash: PromiseOrValue<BytesLike>;
    l2LogsTreeRoot: PromiseOrValue<BytesLike>;
    timestamp: PromiseOrValue<BigNumberish>;
    commitment: PromiseOrValue<BytesLike>;
  };

  export type StoredBlockInfoStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    string
  ] & {
    blockNumber: BigNumber;
    blockHash: string;
    indexRepeatedStorageChanges: BigNumber;
    numberOfLayer1Txs: BigNumber;
    priorityOperationsHash: string;
    l2LogsTreeRoot: string;
    timestamp: BigNumber;
    commitment: string;
  };

  export type CommitBlockInfoStruct = {
    blockNumber: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    indexRepeatedStorageChanges: PromiseOrValue<BigNumberish>;
    newStateRoot: PromiseOrValue<BytesLike>;
    numberOfLayer1Txs: PromiseOrValue<BigNumberish>;
    l2LogsTreeRoot: PromiseOrValue<BytesLike>;
    priorityOperationsHash: PromiseOrValue<BytesLike>;
    initialStorageChanges: PromiseOrValue<BytesLike>;
    repeatedStorageChanges: PromiseOrValue<BytesLike>;
    l2Logs: PromiseOrValue<BytesLike>;
    l2ArbitraryLengthMessages: PromiseOrValue<BytesLike>[];
    factoryDeps: PromiseOrValue<BytesLike>[];
  };

  export type CommitBlockInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    blockNumber: BigNumber;
    timestamp: BigNumber;
    indexRepeatedStorageChanges: BigNumber;
    newStateRoot: string;
    numberOfLayer1Txs: BigNumber;
    l2LogsTreeRoot: string;
    priorityOperationsHash: string;
    initialStorageChanges: string;
    repeatedStorageChanges: string;
    l2Logs: string;
    l2ArbitraryLengthMessages: string[];
    factoryDeps: string[];
  };

  export type ProofInputStruct = {
    recursiveAggregationInput: PromiseOrValue<BigNumberish>[];
    serializedProof: PromiseOrValue<BigNumberish>[];
  };

  export type ProofInputStructOutput = [BigNumber[], BigNumber[]] & {
    recursiveAggregationInput: BigNumber[];
    serializedProof: BigNumber[];
  };
}

export declare namespace IGetters {
  export type FacetStruct = {
    addr: PromiseOrValue<string>;
    selectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };
}

export interface IZkSyncInterface extends utils.Interface {
  functions: {
    "acceptGovernor()": FunctionFragment;
    "cancelUpgradeProposal(bytes32)": FunctionFragment;
    "commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),(uint64,uint64,uint64,bytes32,uint256,bytes32,bytes32,bytes,bytes,bytes,bytes[],bytes[])[])": FunctionFragment;
    "executeBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32)[])": FunctionFragment;
    "executeUpgrade(((address,uint8,bool,bytes4[])[],address,bytes),bytes32)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])": FunctionFragment;
    "freezeDiamond()": FunctionFragment;
    "getAllowList()": FunctionFragment;
    "getCurrentProposalId()": FunctionFragment;
    "getFirstUnprocessedPriorityTx()": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "getL2BootloaderBytecodeHash()": FunctionFragment;
    "getL2DefaultAccountBytecodeHash()": FunctionFragment;
    "getPendingGovernor()": FunctionFragment;
    "getPriorityQueueSize()": FunctionFragment;
    "getPriorityTxMaxGasLimit()": FunctionFragment;
    "getProposedUpgradeHash()": FunctionFragment;
    "getProposedUpgradeTimestamp()": FunctionFragment;
    "getSecurityCouncil()": FunctionFragment;
    "getTotalBlocksCommitted()": FunctionFragment;
    "getTotalBlocksExecuted()": FunctionFragment;
    "getTotalBlocksVerified()": FunctionFragment;
    "getTotalPriorityTxs()": FunctionFragment;
    "getUpgradeProposalState()": FunctionFragment;
    "getVerifier()": FunctionFragment;
    "getVerifierParams()": FunctionFragment;
    "isApprovedBySecurityCouncil()": FunctionFragment;
    "isDiamondStorageFrozen()": FunctionFragment;
    "isEthWithdrawalFinalized(uint256,uint256)": FunctionFragment;
    "isFacetFreezable(address)": FunctionFragment;
    "isFunctionFreezable(bytes4)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "l2LogsRootHash(uint256)": FunctionFragment;
    "l2TransactionBaseCost(uint256,uint256,uint256)": FunctionFragment;
    "priorityQueueFrontOperation()": FunctionFragment;
    "proposeShadowUpgrade(bytes32,uint40)": FunctionFragment;
    "proposeTransparentUpgrade(((address,uint8,bool,bytes4[])[],address,bytes),uint40)": FunctionFragment;
    "proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),(uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32)[],(uint256[],uint256[]))": FunctionFragment;
    "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)": FunctionFragment;
    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])": FunctionFragment;
    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])": FunctionFragment;
    "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)": FunctionFragment;
    "revertBlocks(uint256)": FunctionFragment;
    "securityCouncilUpgradeApprove(bytes32)": FunctionFragment;
    "setAllowList(address)": FunctionFragment;
    "setL2BootloaderBytecodeHash(bytes32)": FunctionFragment;
    "setL2DefaultAccountBytecodeHash(bytes32)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setPorterAvailability(bool)": FunctionFragment;
    "setPriorityTxMaxGasLimit(uint256)": FunctionFragment;
    "setValidator(address,bool)": FunctionFragment;
    "setVerifier(address)": FunctionFragment;
    "setVerifierParams((bytes32,bytes32,bytes32))": FunctionFragment;
    "storedBlockHash(uint256)": FunctionFragment;
    "unfreezeDiamond()": FunctionFragment;
    "upgradeProposalHash(((address,uint8,bool,bytes4[])[],address,bytes),uint256,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptGovernor"
      | "cancelUpgradeProposal"
      | "commitBlocks"
      | "executeBlocks"
      | "executeUpgrade"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "finalizeEthWithdrawal"
      | "freezeDiamond"
      | "getAllowList"
      | "getCurrentProposalId"
      | "getFirstUnprocessedPriorityTx"
      | "getGovernor"
      | "getL2BootloaderBytecodeHash"
      | "getL2DefaultAccountBytecodeHash"
      | "getPendingGovernor"
      | "getPriorityQueueSize"
      | "getPriorityTxMaxGasLimit"
      | "getProposedUpgradeHash"
      | "getProposedUpgradeTimestamp"
      | "getSecurityCouncil"
      | "getTotalBlocksCommitted"
      | "getTotalBlocksExecuted"
      | "getTotalBlocksVerified"
      | "getTotalPriorityTxs"
      | "getUpgradeProposalState"
      | "getVerifier"
      | "getVerifierParams"
      | "isApprovedBySecurityCouncil"
      | "isDiamondStorageFrozen"
      | "isEthWithdrawalFinalized"
      | "isFacetFreezable"
      | "isFunctionFreezable"
      | "isValidator"
      | "l2LogsRootHash"
      | "l2TransactionBaseCost"
      | "priorityQueueFrontOperation"
      | "proposeShadowUpgrade"
      | "proposeTransparentUpgrade"
      | "proveBlocks"
      | "proveL1ToL2TransactionStatus"
      | "proveL2LogInclusion"
      | "proveL2MessageInclusion"
      | "requestL2Transaction"
      | "revertBlocks"
      | "securityCouncilUpgradeApprove"
      | "setAllowList"
      | "setL2BootloaderBytecodeHash"
      | "setL2DefaultAccountBytecodeHash"
      | "setPendingGovernor"
      | "setPorterAvailability"
      | "setPriorityTxMaxGasLimit"
      | "setValidator"
      | "setVerifier"
      | "setVerifierParams"
      | "storedBlockHash"
      | "unfreezeDiamond"
      | "upgradeProposalHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUpgradeProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "commitBlocks",
    values: [IExecutor.StoredBlockInfoStruct, IExecutor.CommitBlockInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBlocks",
    values: [IExecutor.StoredBlockInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUpgrade",
    values: [Diamond.DiamondCutDataStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeEthWithdrawal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstUnprocessedPriorityTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2BootloaderBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityQueueSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityTxMaxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedUpgradeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedUpgradeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecurityCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPriorityTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpgradeProposalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifierParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedBySecurityCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDiamondStorageFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEthWithdrawalFinalized",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFacetFreezable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionFreezable",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "l2LogsRootHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "l2TransactionBaseCost",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priorityQueueFrontOperation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeShadowUpgrade",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeTransparentUpgrade",
    values: [Diamond.DiamondCutDataStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proveBlocks",
    values: [
      IExecutor.StoredBlockInfoStruct,
      IExecutor.StoredBlockInfoStruct[],
      IExecutor.ProofInputStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL1ToL2TransactionStatus",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2LogInclusion",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      L2LogStruct,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2MessageInclusion",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      L2MessageStruct,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2Transaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertBlocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "securityCouncilUpgradeApprove",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2BootloaderBytecodeHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2DefaultAccountBytecodeHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPorterAvailability",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriorityTxMaxGasLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifierParams",
    values: [VerifierParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "storedBlockHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProposalHash",
    values: [
      Diamond.DiamondCutDataStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUpgradeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeEthWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstUnprocessedPriorityTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2BootloaderBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityQueueSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedUpgradeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedUpgradeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecurityCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPriorityTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpgradeProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifierParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedBySecurityCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDiamondStorageFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEthWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFacetFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2LogsRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2TransactionBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priorityQueueFrontOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeShadowUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeTransparentUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL1ToL2TransactionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2LogInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2MessageInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "securityCouncilUpgradeApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2BootloaderBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2DefaultAccountBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPorterAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifierParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProposalHash",
    data: BytesLike
  ): Result;

  events: {
    "BlockCommit(uint256,bytes32,bytes32)": EventFragment;
    "BlockExecution(uint256,bytes32,bytes32)": EventFragment;
    "BlocksRevert(uint256,uint256,uint256)": EventFragment;
    "BlocksVerification(uint256,uint256)": EventFragment;
    "CancelUpgradeProposal(uint256,bytes32)": EventFragment;
    "EthWithdrawalFinalized(address,uint256)": EventFragment;
    "ExecuteUpgrade(uint256,bytes32,bytes32)": EventFragment;
    "Freeze()": EventFragment;
    "IsPorterAvailableStatusUpdate(bool)": EventFragment;
    "NewAllowList(address,address)": EventFragment;
    "NewGovernor(address,address)": EventFragment;
    "NewL2BootloaderBytecodeHash(bytes32,bytes32)": EventFragment;
    "NewL2DefaultAccountBytecodeHash(bytes32,bytes32)": EventFragment;
    "NewPendingGovernor(address,address)": EventFragment;
    "NewPriorityRequest(uint256,bytes32,uint64,tuple,bytes[])": EventFragment;
    "NewPriorityTxMaxGasLimit(uint256,uint256)": EventFragment;
    "NewVerifier(address,address)": EventFragment;
    "NewVerifierParams(tuple,tuple)": EventFragment;
    "ProposeShadowUpgrade(uint256,bytes32)": EventFragment;
    "ProposeTransparentUpgrade(tuple,uint256,bytes32)": EventFragment;
    "SecurityCouncilUpgradeApprove(uint256,bytes32)": EventFragment;
    "Unfreeze()": EventFragment;
    "ValidatorStatusUpdate(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksRevert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksVerification"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelUpgradeProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthWithdrawalFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteUpgrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Freeze"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IsPorterAvailableStatusUpdate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAllowList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernor"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewL2BootloaderBytecodeHash"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewL2DefaultAccountBytecodeHash"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityTxMaxGasLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVerifier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVerifierParams"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeShadowUpgrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeTransparentUpgrade"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SecurityCouncilUpgradeApprove"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfreeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorStatusUpdate"): EventFragment;
}

export interface BlockCommitEventObject {
  blockNumber: BigNumber;
  blockHash: string;
  commitment: string;
}
export type BlockCommitEvent = TypedEvent<
  [BigNumber, string, string],
  BlockCommitEventObject
>;

export type BlockCommitEventFilter = TypedEventFilter<BlockCommitEvent>;

export interface BlockExecutionEventObject {
  blockNumber: BigNumber;
  blockHash: string;
  commitment: string;
}
export type BlockExecutionEvent = TypedEvent<
  [BigNumber, string, string],
  BlockExecutionEventObject
>;

export type BlockExecutionEventFilter = TypedEventFilter<BlockExecutionEvent>;

export interface BlocksRevertEventObject {
  totalBlocksCommitted: BigNumber;
  totalBlocksVerified: BigNumber;
  totalBlocksExecuted: BigNumber;
}
export type BlocksRevertEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  BlocksRevertEventObject
>;

export type BlocksRevertEventFilter = TypedEventFilter<BlocksRevertEvent>;

export interface BlocksVerificationEventObject {
  previousLastVerifiedBlock: BigNumber;
  currentLastVerifiedBlock: BigNumber;
}
export type BlocksVerificationEvent = TypedEvent<
  [BigNumber, BigNumber],
  BlocksVerificationEventObject
>;

export type BlocksVerificationEventFilter =
  TypedEventFilter<BlocksVerificationEvent>;

export interface CancelUpgradeProposalEventObject {
  proposalId: BigNumber;
  proposalHash: string;
}
export type CancelUpgradeProposalEvent = TypedEvent<
  [BigNumber, string],
  CancelUpgradeProposalEventObject
>;

export type CancelUpgradeProposalEventFilter =
  TypedEventFilter<CancelUpgradeProposalEvent>;

export interface EthWithdrawalFinalizedEventObject {
  to: string;
  amount: BigNumber;
}
export type EthWithdrawalFinalizedEvent = TypedEvent<
  [string, BigNumber],
  EthWithdrawalFinalizedEventObject
>;

export type EthWithdrawalFinalizedEventFilter =
  TypedEventFilter<EthWithdrawalFinalizedEvent>;

export interface ExecuteUpgradeEventObject {
  proposalId: BigNumber;
  proposalHash: string;
  proposalSalt: string;
}
export type ExecuteUpgradeEvent = TypedEvent<
  [BigNumber, string, string],
  ExecuteUpgradeEventObject
>;

export type ExecuteUpgradeEventFilter = TypedEventFilter<ExecuteUpgradeEvent>;

export interface FreezeEventObject {}
export type FreezeEvent = TypedEvent<[], FreezeEventObject>;

export type FreezeEventFilter = TypedEventFilter<FreezeEvent>;

export interface IsPorterAvailableStatusUpdateEventObject {
  isPorterAvailable: boolean;
}
export type IsPorterAvailableStatusUpdateEvent = TypedEvent<
  [boolean],
  IsPorterAvailableStatusUpdateEventObject
>;

export type IsPorterAvailableStatusUpdateEventFilter =
  TypedEventFilter<IsPorterAvailableStatusUpdateEvent>;

export interface NewAllowListEventObject {
  oldAllowList: string;
  newAllowList: string;
}
export type NewAllowListEvent = TypedEvent<
  [string, string],
  NewAllowListEventObject
>;

export type NewAllowListEventFilter = TypedEventFilter<NewAllowListEvent>;

export interface NewGovernorEventObject {
  oldGovernor: string;
  newGovernor: string;
}
export type NewGovernorEvent = TypedEvent<
  [string, string],
  NewGovernorEventObject
>;

export type NewGovernorEventFilter = TypedEventFilter<NewGovernorEvent>;

export interface NewL2BootloaderBytecodeHashEventObject {
  previousBytecodeHash: string;
  newBytecodeHash: string;
}
export type NewL2BootloaderBytecodeHashEvent = TypedEvent<
  [string, string],
  NewL2BootloaderBytecodeHashEventObject
>;

export type NewL2BootloaderBytecodeHashEventFilter =
  TypedEventFilter<NewL2BootloaderBytecodeHashEvent>;

export interface NewL2DefaultAccountBytecodeHashEventObject {
  previousBytecodeHash: string;
  newBytecodeHash: string;
}
export type NewL2DefaultAccountBytecodeHashEvent = TypedEvent<
  [string, string],
  NewL2DefaultAccountBytecodeHashEventObject
>;

export type NewL2DefaultAccountBytecodeHashEventFilter =
  TypedEventFilter<NewL2DefaultAccountBytecodeHashEvent>;

export interface NewPendingGovernorEventObject {
  oldPendingGovernor: string;
  newPendingGovernor: string;
}
export type NewPendingGovernorEvent = TypedEvent<
  [string, string],
  NewPendingGovernorEventObject
>;

export type NewPendingGovernorEventFilter =
  TypedEventFilter<NewPendingGovernorEvent>;

export interface NewPriorityRequestEventObject {
  txId: BigNumber;
  txHash: string;
  expirationTimestamp: BigNumber;
  transaction: IMailbox.L2CanonicalTransactionStructOutput;
  factoryDeps: string[];
}
export type NewPriorityRequestEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    IMailbox.L2CanonicalTransactionStructOutput,
    string[]
  ],
  NewPriorityRequestEventObject
>;

export type NewPriorityRequestEventFilter =
  TypedEventFilter<NewPriorityRequestEvent>;

export interface NewPriorityTxMaxGasLimitEventObject {
  oldPriorityTxMaxGasLimit: BigNumber;
  newPriorityTxMaxGasLimit: BigNumber;
}
export type NewPriorityTxMaxGasLimitEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewPriorityTxMaxGasLimitEventObject
>;

export type NewPriorityTxMaxGasLimitEventFilter =
  TypedEventFilter<NewPriorityTxMaxGasLimitEvent>;

export interface NewVerifierEventObject {
  oldVerifier: string;
  newVerifier: string;
}
export type NewVerifierEvent = TypedEvent<
  [string, string],
  NewVerifierEventObject
>;

export type NewVerifierEventFilter = TypedEventFilter<NewVerifierEvent>;

export interface NewVerifierParamsEventObject {
  oldVerifierParams: VerifierParamsStructOutput;
  newVerifierParams: VerifierParamsStructOutput;
}
export type NewVerifierParamsEvent = TypedEvent<
  [VerifierParamsStructOutput, VerifierParamsStructOutput],
  NewVerifierParamsEventObject
>;

export type NewVerifierParamsEventFilter =
  TypedEventFilter<NewVerifierParamsEvent>;

export interface ProposeShadowUpgradeEventObject {
  proposalId: BigNumber;
  proposalHash: string;
}
export type ProposeShadowUpgradeEvent = TypedEvent<
  [BigNumber, string],
  ProposeShadowUpgradeEventObject
>;

export type ProposeShadowUpgradeEventFilter =
  TypedEventFilter<ProposeShadowUpgradeEvent>;

export interface ProposeTransparentUpgradeEventObject {
  diamondCut: Diamond.DiamondCutDataStructOutput;
  proposalId: BigNumber;
  proposalSalt: string;
}
export type ProposeTransparentUpgradeEvent = TypedEvent<
  [Diamond.DiamondCutDataStructOutput, BigNumber, string],
  ProposeTransparentUpgradeEventObject
>;

export type ProposeTransparentUpgradeEventFilter =
  TypedEventFilter<ProposeTransparentUpgradeEvent>;

export interface SecurityCouncilUpgradeApproveEventObject {
  proposalId: BigNumber;
  proposalHash: string;
}
export type SecurityCouncilUpgradeApproveEvent = TypedEvent<
  [BigNumber, string],
  SecurityCouncilUpgradeApproveEventObject
>;

export type SecurityCouncilUpgradeApproveEventFilter =
  TypedEventFilter<SecurityCouncilUpgradeApproveEvent>;

export interface UnfreezeEventObject {}
export type UnfreezeEvent = TypedEvent<[], UnfreezeEventObject>;

export type UnfreezeEventFilter = TypedEventFilter<UnfreezeEvent>;

export interface ValidatorStatusUpdateEventObject {
  validatorAddress: string;
  isActive: boolean;
}
export type ValidatorStatusUpdateEvent = TypedEvent<
  [string, boolean],
  ValidatorStatusUpdateEventObject
>;

export type ValidatorStatusUpdateEventFilter =
  TypedEventFilter<ValidatorStatusUpdateEvent>;

export interface IZkSync extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IZkSyncInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelUpgradeProposal(
      _proposedUpgradeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitBlocks(
      _lastCommittedBlockData: IExecutor.StoredBlockInfoStruct,
      _newBlocksData: IExecutor.CommitBlockInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeBlocks(
      _blocksData: IExecutor.StoredBlockInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { facet: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facets: string[] }>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    facets(overrides?: CallOverrides): Promise<[IGetters.FacetStructOutput[]]>;

    finalizeEthWithdrawal(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBlock: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllowList(overrides?: CallOverrides): Promise<[string]>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGovernor(overrides?: CallOverrides): Promise<[string]>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<[string]>;

    getL2DefaultAccountBytecodeHash(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProposedUpgradeHash(overrides?: CallOverrides): Promise<[string]>;

    getProposedUpgradeTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSecurityCouncil(overrides?: CallOverrides): Promise<[string]>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUpgradeProposalState(overrides?: CallOverrides): Promise<[number]>;

    getVerifier(overrides?: CallOverrides): Promise<[string]>;

    getVerifierParams(
      overrides?: CallOverrides
    ): Promise<[VerifierParamsStructOutput]>;

    isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<[boolean]>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    isEthWithdrawalFinalized(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFacetFreezable(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isFreezable: boolean }>;

    isFunctionFreezable(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l2LogsRootHash(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    l2TransactionBaseCost(
      _gasPrice: PromiseOrValue<BigNumberish>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<[PriorityOperationStructOutput]>;

    proposeShadowUpgrade(
      _proposalHash: PromiseOrValue<BytesLike>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeTransparentUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proveBlocks(
      _prevBlock: IExecutor.StoredBlockInfoStruct,
      _committedBlocks: IExecutor.StoredBlockInfoStruct[],
      _proof: IExecutor.ProofInputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBlock: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proveL2LogInclusion(
      _blockNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _log: L2LogStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proveL2MessageInclusion(
      _blockNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _message: L2MessageStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requestL2Transaction(
      _contractL2: PromiseOrValue<string>,
      _l2Value: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      _factoryDeps: PromiseOrValue<BytesLike>[],
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revertBlocks(
      _newLastBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    securityCouncilUpgradeApprove(
      _upgradeProposalHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowList(
      _newAllowList: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _newPendingGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPorterAvailability(
      _zkPorterIsAvailable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVerifier(
      _newVerifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVerifierParams(
      _newVerifierParams: VerifierParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storedBlockHash(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeProposalHash(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  acceptGovernor(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelUpgradeProposal(
    _proposedUpgradeHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitBlocks(
    _lastCommittedBlockData: IExecutor.StoredBlockInfoStruct,
    _newBlocksData: IExecutor.CommitBlockInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeBlocks(
    _blocksData: IExecutor.StoredBlockInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeUpgrade(
    _diamondCut: Diamond.DiamondCutDataStruct,
    _proposalSalt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IGetters.FacetStructOutput[]>;

  finalizeEthWithdrawal(
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    _l2MessageIndex: PromiseOrValue<BigNumberish>,
    _l2TxNumberInBlock: PromiseOrValue<BigNumberish>,
    _message: PromiseOrValue<BytesLike>,
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freezeDiamond(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllowList(overrides?: CallOverrides): Promise<string>;

  getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<BigNumber>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<string>;

  getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<string>;

  getPendingGovernor(overrides?: CallOverrides): Promise<string>;

  getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

  getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getProposedUpgradeHash(overrides?: CallOverrides): Promise<string>;

  getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getSecurityCouncil(overrides?: CallOverrides): Promise<string>;

  getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

  getUpgradeProposalState(overrides?: CallOverrides): Promise<number>;

  getVerifier(overrides?: CallOverrides): Promise<string>;

  getVerifierParams(
    overrides?: CallOverrides
  ): Promise<VerifierParamsStructOutput>;

  isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<boolean>;

  isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

  isEthWithdrawalFinalized(
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    _l2MessageIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFacetFreezable(
    _facet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFunctionFreezable(
    _selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidator(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2LogsRootHash(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  l2TransactionBaseCost(
    _gasPrice: PromiseOrValue<BigNumberish>,
    _l2GasLimit: PromiseOrValue<BigNumberish>,
    _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priorityQueueFrontOperation(
    overrides?: CallOverrides
  ): Promise<PriorityOperationStructOutput>;

  proposeShadowUpgrade(
    _proposalHash: PromiseOrValue<BytesLike>,
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeTransparentUpgrade(
    _diamondCut: Diamond.DiamondCutDataStruct,
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proveBlocks(
    _prevBlock: IExecutor.StoredBlockInfoStruct,
    _committedBlocks: IExecutor.StoredBlockInfoStruct[],
    _proof: IExecutor.ProofInputStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proveL1ToL2TransactionStatus(
    _l2TxHash: PromiseOrValue<BytesLike>,
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    _l2MessageIndex: PromiseOrValue<BigNumberish>,
    _l2TxNumberInBlock: PromiseOrValue<BigNumberish>,
    _merkleProof: PromiseOrValue<BytesLike>[],
    _status: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2LogInclusion(
    _blockNumber: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _log: L2LogStruct,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2MessageInclusion(
    _blockNumber: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _message: L2MessageStruct,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestL2Transaction(
    _contractL2: PromiseOrValue<string>,
    _l2Value: PromiseOrValue<BigNumberish>,
    _calldata: PromiseOrValue<BytesLike>,
    _l2GasLimit: PromiseOrValue<BigNumberish>,
    _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
    _factoryDeps: PromiseOrValue<BytesLike>[],
    _refundRecipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revertBlocks(
    _newLastBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  securityCouncilUpgradeApprove(
    _upgradeProposalHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowList(
    _newAllowList: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL2BootloaderBytecodeHash(
    _l2BootloaderBytecodeHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL2DefaultAccountBytecodeHash(
    _l2DefaultAccountBytecodeHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _newPendingGovernor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPorterAvailability(
    _zkPorterIsAvailable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriorityTxMaxGasLimit(
    _newPriorityTxMaxGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: PromiseOrValue<string>,
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVerifier(
    _newVerifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVerifierParams(
    _newVerifierParams: VerifierParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storedBlockHash(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  unfreezeDiamond(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeProposalHash(
    _diamondCut: Diamond.DiamondCutDataStruct,
    _proposalId: PromiseOrValue<BigNumberish>,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    cancelUpgradeProposal(
      _proposedUpgradeHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitBlocks(
      _lastCommittedBlockData: IExecutor.StoredBlockInfoStruct,
      _newBlocksData: IExecutor.CommitBlockInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeBlocks(
      _blocksData: IExecutor.StoredBlockInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalSalt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<IGetters.FacetStructOutput[]>;

    finalizeEthWithdrawal(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBlock: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    freezeDiamond(overrides?: CallOverrides): Promise<void>;

    getAllowList(overrides?: CallOverrides): Promise<string>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<string>;

    getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<string>;

    getPendingGovernor(overrides?: CallOverrides): Promise<string>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedUpgradeHash(overrides?: CallOverrides): Promise<string>;

    getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getSecurityCouncil(overrides?: CallOverrides): Promise<string>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    getUpgradeProposalState(overrides?: CallOverrides): Promise<number>;

    getVerifier(overrides?: CallOverrides): Promise<string>;

    getVerifierParams(
      overrides?: CallOverrides
    ): Promise<VerifierParamsStructOutput>;

    isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<boolean>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

    isEthWithdrawalFinalized(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFacetFreezable(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFunctionFreezable(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2LogsRootHash(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    l2TransactionBaseCost(
      _gasPrice: PromiseOrValue<BigNumberish>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<PriorityOperationStructOutput>;

    proposeShadowUpgrade(
      _proposalHash: PromiseOrValue<BytesLike>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeTransparentUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proveBlocks(
      _prevBlock: IExecutor.StoredBlockInfoStruct,
      _committedBlocks: IExecutor.StoredBlockInfoStruct[],
      _proof: IExecutor.ProofInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBlock: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2LogInclusion(
      _blockNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _log: L2LogStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2MessageInclusion(
      _blockNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _message: L2MessageStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestL2Transaction(
      _contractL2: PromiseOrValue<string>,
      _l2Value: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      _factoryDeps: PromiseOrValue<BytesLike>[],
      _refundRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    revertBlocks(
      _newLastBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    securityCouncilUpgradeApprove(
      _upgradeProposalHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowList(
      _newAllowList: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _newPendingGovernor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPorterAvailability(
      _zkPorterIsAvailable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidator(
      _validator: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifier(
      _newVerifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifierParams(
      _newVerifierParams: VerifierParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    storedBlockHash(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    unfreezeDiamond(overrides?: CallOverrides): Promise<void>;

    upgradeProposalHash(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "BlockCommit(uint256,bytes32,bytes32)"(
      blockNumber?: PromiseOrValue<BigNumberish> | null,
      blockHash?: PromiseOrValue<BytesLike> | null,
      commitment?: PromiseOrValue<BytesLike> | null
    ): BlockCommitEventFilter;
    BlockCommit(
      blockNumber?: PromiseOrValue<BigNumberish> | null,
      blockHash?: PromiseOrValue<BytesLike> | null,
      commitment?: PromiseOrValue<BytesLike> | null
    ): BlockCommitEventFilter;

    "BlockExecution(uint256,bytes32,bytes32)"(
      blockNumber?: PromiseOrValue<BigNumberish> | null,
      blockHash?: PromiseOrValue<BytesLike> | null,
      commitment?: PromiseOrValue<BytesLike> | null
    ): BlockExecutionEventFilter;
    BlockExecution(
      blockNumber?: PromiseOrValue<BigNumberish> | null,
      blockHash?: PromiseOrValue<BytesLike> | null,
      commitment?: PromiseOrValue<BytesLike> | null
    ): BlockExecutionEventFilter;

    "BlocksRevert(uint256,uint256,uint256)"(
      totalBlocksCommitted?: null,
      totalBlocksVerified?: null,
      totalBlocksExecuted?: null
    ): BlocksRevertEventFilter;
    BlocksRevert(
      totalBlocksCommitted?: null,
      totalBlocksVerified?: null,
      totalBlocksExecuted?: null
    ): BlocksRevertEventFilter;

    "BlocksVerification(uint256,uint256)"(
      previousLastVerifiedBlock?: PromiseOrValue<BigNumberish> | null,
      currentLastVerifiedBlock?: PromiseOrValue<BigNumberish> | null
    ): BlocksVerificationEventFilter;
    BlocksVerification(
      previousLastVerifiedBlock?: PromiseOrValue<BigNumberish> | null,
      currentLastVerifiedBlock?: PromiseOrValue<BigNumberish> | null
    ): BlocksVerificationEventFilter;

    "CancelUpgradeProposal(uint256,bytes32)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): CancelUpgradeProposalEventFilter;
    CancelUpgradeProposal(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): CancelUpgradeProposalEventFilter;

    "EthWithdrawalFinalized(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): EthWithdrawalFinalizedEventFilter;
    EthWithdrawalFinalized(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): EthWithdrawalFinalizedEventFilter;

    "ExecuteUpgrade(uint256,bytes32,bytes32)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null,
      proposalSalt?: null
    ): ExecuteUpgradeEventFilter;
    ExecuteUpgrade(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null,
      proposalSalt?: null
    ): ExecuteUpgradeEventFilter;

    "Freeze()"(): FreezeEventFilter;
    Freeze(): FreezeEventFilter;

    "IsPorterAvailableStatusUpdate(bool)"(
      isPorterAvailable?: null
    ): IsPorterAvailableStatusUpdateEventFilter;
    IsPorterAvailableStatusUpdate(
      isPorterAvailable?: null
    ): IsPorterAvailableStatusUpdateEventFilter;

    "NewAllowList(address,address)"(
      oldAllowList?: PromiseOrValue<string> | null,
      newAllowList?: PromiseOrValue<string> | null
    ): NewAllowListEventFilter;
    NewAllowList(
      oldAllowList?: PromiseOrValue<string> | null,
      newAllowList?: PromiseOrValue<string> | null
    ): NewAllowListEventFilter;

    "NewGovernor(address,address)"(
      oldGovernor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): NewGovernorEventFilter;
    NewGovernor(
      oldGovernor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): NewGovernorEventFilter;

    "NewL2BootloaderBytecodeHash(bytes32,bytes32)"(
      previousBytecodeHash?: PromiseOrValue<BytesLike> | null,
      newBytecodeHash?: PromiseOrValue<BytesLike> | null
    ): NewL2BootloaderBytecodeHashEventFilter;
    NewL2BootloaderBytecodeHash(
      previousBytecodeHash?: PromiseOrValue<BytesLike> | null,
      newBytecodeHash?: PromiseOrValue<BytesLike> | null
    ): NewL2BootloaderBytecodeHashEventFilter;

    "NewL2DefaultAccountBytecodeHash(bytes32,bytes32)"(
      previousBytecodeHash?: PromiseOrValue<BytesLike> | null,
      newBytecodeHash?: PromiseOrValue<BytesLike> | null
    ): NewL2DefaultAccountBytecodeHashEventFilter;
    NewL2DefaultAccountBytecodeHash(
      previousBytecodeHash?: PromiseOrValue<BytesLike> | null,
      newBytecodeHash?: PromiseOrValue<BytesLike> | null
    ): NewL2DefaultAccountBytecodeHashEventFilter;

    "NewPendingGovernor(address,address)"(
      oldPendingGovernor?: PromiseOrValue<string> | null,
      newPendingGovernor?: PromiseOrValue<string> | null
    ): NewPendingGovernorEventFilter;
    NewPendingGovernor(
      oldPendingGovernor?: PromiseOrValue<string> | null,
      newPendingGovernor?: PromiseOrValue<string> | null
    ): NewPendingGovernorEventFilter;

    "NewPriorityRequest(uint256,bytes32,uint64,tuple,bytes[])"(
      txId?: null,
      txHash?: null,
      expirationTimestamp?: null,
      transaction?: null,
      factoryDeps?: null
    ): NewPriorityRequestEventFilter;
    NewPriorityRequest(
      txId?: null,
      txHash?: null,
      expirationTimestamp?: null,
      transaction?: null,
      factoryDeps?: null
    ): NewPriorityRequestEventFilter;

    "NewPriorityTxMaxGasLimit(uint256,uint256)"(
      oldPriorityTxMaxGasLimit?: null,
      newPriorityTxMaxGasLimit?: null
    ): NewPriorityTxMaxGasLimitEventFilter;
    NewPriorityTxMaxGasLimit(
      oldPriorityTxMaxGasLimit?: null,
      newPriorityTxMaxGasLimit?: null
    ): NewPriorityTxMaxGasLimitEventFilter;

    "NewVerifier(address,address)"(
      oldVerifier?: PromiseOrValue<string> | null,
      newVerifier?: PromiseOrValue<string> | null
    ): NewVerifierEventFilter;
    NewVerifier(
      oldVerifier?: PromiseOrValue<string> | null,
      newVerifier?: PromiseOrValue<string> | null
    ): NewVerifierEventFilter;

    "NewVerifierParams(tuple,tuple)"(
      oldVerifierParams?: null,
      newVerifierParams?: null
    ): NewVerifierParamsEventFilter;
    NewVerifierParams(
      oldVerifierParams?: null,
      newVerifierParams?: null
    ): NewVerifierParamsEventFilter;

    "ProposeShadowUpgrade(uint256,bytes32)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): ProposeShadowUpgradeEventFilter;
    ProposeShadowUpgrade(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): ProposeShadowUpgradeEventFilter;

    "ProposeTransparentUpgrade(tuple,uint256,bytes32)"(
      diamondCut?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalSalt?: null
    ): ProposeTransparentUpgradeEventFilter;
    ProposeTransparentUpgrade(
      diamondCut?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalSalt?: null
    ): ProposeTransparentUpgradeEventFilter;

    "SecurityCouncilUpgradeApprove(uint256,bytes32)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): SecurityCouncilUpgradeApproveEventFilter;
    SecurityCouncilUpgradeApprove(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      proposalHash?: PromiseOrValue<BytesLike> | null
    ): SecurityCouncilUpgradeApproveEventFilter;

    "Unfreeze()"(): UnfreezeEventFilter;
    Unfreeze(): UnfreezeEventFilter;

    "ValidatorStatusUpdate(address,bool)"(
      validatorAddress?: PromiseOrValue<string> | null,
      isActive?: null
    ): ValidatorStatusUpdateEventFilter;
    ValidatorStatusUpdate(
      validatorAddress?: PromiseOrValue<string> | null,
      isActive?: null
    ): ValidatorStatusUpdateEventFilter;
  };

  estimateGas: {
    acceptGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelUpgradeProposal(
      _proposedUpgradeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitBlocks(
      _lastCommittedBlockData: IExecutor.StoredBlockInfoStruct,
      _newBlocksData: IExecutor.CommitBlockInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeBlocks(
      _blocksData: IExecutor.StoredBlockInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeEthWithdrawal(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBlock: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllowList(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    getL2DefaultAccountBytecodeHash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedUpgradeHash(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getSecurityCouncil(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    getUpgradeProposalState(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifierParams(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<BigNumber>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    isEthWithdrawalFinalized(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFacetFreezable(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFunctionFreezable(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2LogsRootHash(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2TransactionBaseCost(
      _gasPrice: PromiseOrValue<BigNumberish>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priorityQueueFrontOperation(overrides?: CallOverrides): Promise<BigNumber>;

    proposeShadowUpgrade(
      _proposalHash: PromiseOrValue<BytesLike>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeTransparentUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proveBlocks(
      _prevBlock: IExecutor.StoredBlockInfoStruct,
      _committedBlocks: IExecutor.StoredBlockInfoStruct[],
      _proof: IExecutor.ProofInputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBlock: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2LogInclusion(
      _blockNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _log: L2LogStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2MessageInclusion(
      _blockNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _message: L2MessageStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestL2Transaction(
      _contractL2: PromiseOrValue<string>,
      _l2Value: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      _factoryDeps: PromiseOrValue<BytesLike>[],
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revertBlocks(
      _newLastBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    securityCouncilUpgradeApprove(
      _upgradeProposalHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowList(
      _newAllowList: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingGovernor(
      _newPendingGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPorterAvailability(
      _zkPorterIsAvailable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidator(
      _validator: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVerifier(
      _newVerifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVerifierParams(
      _newVerifierParams: VerifierParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storedBlockHash(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeProposalHash(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelUpgradeProposal(
      _proposedUpgradeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitBlocks(
      _lastCommittedBlockData: IExecutor.StoredBlockInfoStruct,
      _newBlocksData: IExecutor.CommitBlockInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeBlocks(
      _blocksData: IExecutor.StoredBlockInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalSalt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeEthWithdrawal(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBlock: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllowList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getL2BootloaderBytecodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2DefaultAccountBytecodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingGovernor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityQueueSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityTxMaxGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedUpgradeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedUpgradeTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecurityCouncil(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksCommitted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksExecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksVerified(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPriorityTxs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpgradeProposalState(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVerifierParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedBySecurityCouncil(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDiamondStorageFrozen(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEthWithdrawalFinalized(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFacetFreezable(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFunctionFreezable(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2LogsRootHash(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2TransactionBaseCost(
      _gasPrice: PromiseOrValue<BigNumberish>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeShadowUpgrade(
      _proposalHash: PromiseOrValue<BytesLike>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeTransparentUpgrade(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proveBlocks(
      _prevBlock: IExecutor.StoredBlockInfoStruct,
      _committedBlocks: IExecutor.StoredBlockInfoStruct[],
      _proof: IExecutor.ProofInputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBlock: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2LogInclusion(
      _blockNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _log: L2LogStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2MessageInclusion(
      _blockNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _message: L2MessageStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestL2Transaction(
      _contractL2: PromiseOrValue<string>,
      _l2Value: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      _factoryDeps: PromiseOrValue<BytesLike>[],
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revertBlocks(
      _newLastBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    securityCouncilUpgradeApprove(
      _upgradeProposalHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowList(
      _newAllowList: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _newPendingGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPorterAvailability(
      _zkPorterIsAvailable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVerifier(
      _newVerifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVerifierParams(
      _newVerifierParams: VerifierParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storedBlockHash(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeProposalHash(
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
