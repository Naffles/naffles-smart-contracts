/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export type VerificationKeyStruct = {
  domain_size: PromiseOrValue<BigNumberish>;
  num_inputs: PromiseOrValue<BigNumberish>;
  omega: PairingsBn254.FrStruct;
  gate_selectors_commitments: [
    PairingsBn254.G1PointStruct,
    PairingsBn254.G1PointStruct
  ];
  gate_setup_commitments: PairingsBn254.G1PointStruct[];
  permutation_commitments: [
    PairingsBn254.G1PointStruct,
    PairingsBn254.G1PointStruct,
    PairingsBn254.G1PointStruct,
    PairingsBn254.G1PointStruct
  ];
  lookup_selector_commitment: PairingsBn254.G1PointStruct;
  lookup_tables_commitments: [
    PairingsBn254.G1PointStruct,
    PairingsBn254.G1PointStruct,
    PairingsBn254.G1PointStruct,
    PairingsBn254.G1PointStruct
  ];
  lookup_table_type_commitment: PairingsBn254.G1PointStruct;
  non_residues: [
    PairingsBn254.FrStruct,
    PairingsBn254.FrStruct,
    PairingsBn254.FrStruct
  ];
  g2_elements: [PairingsBn254.G2PointStruct, PairingsBn254.G2PointStruct];
};

export type VerificationKeyStructOutput = [
  BigNumber,
  BigNumber,
  PairingsBn254.FrStructOutput,
  [PairingsBn254.G1PointStructOutput, PairingsBn254.G1PointStructOutput],
  PairingsBn254.G1PointStructOutput[],
  [
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput
  ],
  PairingsBn254.G1PointStructOutput,
  [
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput
  ],
  PairingsBn254.G1PointStructOutput,
  [
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput
  ],
  [PairingsBn254.G2PointStructOutput, PairingsBn254.G2PointStructOutput]
] & {
  domain_size: BigNumber;
  num_inputs: BigNumber;
  omega: PairingsBn254.FrStructOutput;
  gate_selectors_commitments: [
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput
  ];
  gate_setup_commitments: PairingsBn254.G1PointStructOutput[];
  permutation_commitments: [
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput
  ];
  lookup_selector_commitment: PairingsBn254.G1PointStructOutput;
  lookup_tables_commitments: [
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput
  ];
  lookup_table_type_commitment: PairingsBn254.G1PointStructOutput;
  non_residues: [
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput
  ];
  g2_elements: [
    PairingsBn254.G2PointStructOutput,
    PairingsBn254.G2PointStructOutput
  ];
};

export declare namespace PairingsBn254 {
  export type FrStruct = { value: PromiseOrValue<BigNumberish> };

  export type FrStructOutput = [BigNumber] & { value: BigNumber };

  export type G1PointStruct = {
    X: PromiseOrValue<BigNumberish>;
    Y: PromiseOrValue<BigNumberish>;
  };

  export type G1PointStructOutput = [BigNumber, BigNumber] & {
    X: BigNumber;
    Y: BigNumber;
  };

  export type G2PointStruct = {
    X: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    Y: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  };

  export type G2PointStructOutput = [
    [BigNumber, BigNumber],
    [BigNumber, BigNumber]
  ] & { X: [BigNumber, BigNumber]; Y: [BigNumber, BigNumber] };
}

export declare namespace Plonk4VerifierWithAccessToDNext {
  export type PartialVerifierStateStruct = {
    zero: PairingsBn254.FrStruct;
    alpha: PairingsBn254.FrStruct;
    beta: PairingsBn254.FrStruct;
    gamma: PairingsBn254.FrStruct;
    alpha_values: PairingsBn254.FrStruct[];
    eta: PairingsBn254.FrStruct;
    beta_lookup: PairingsBn254.FrStruct;
    gamma_lookup: PairingsBn254.FrStruct;
    beta_plus_one: PairingsBn254.FrStruct;
    beta_gamma: PairingsBn254.FrStruct;
    v: PairingsBn254.FrStruct;
    u: PairingsBn254.FrStruct;
    z: PairingsBn254.FrStruct;
    z_omega: PairingsBn254.FrStruct;
    z_minus_last_omega: PairingsBn254.FrStruct;
    l_0_at_z: PairingsBn254.FrStruct;
    l_n_minus_one_at_z: PairingsBn254.FrStruct;
    t: PairingsBn254.FrStruct;
    tp: PairingsBn254.G1PointStruct;
  };

  export type PartialVerifierStateStructOutput = [
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput[],
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.G1PointStructOutput
  ] & {
    zero: PairingsBn254.FrStructOutput;
    alpha: PairingsBn254.FrStructOutput;
    beta: PairingsBn254.FrStructOutput;
    gamma: PairingsBn254.FrStructOutput;
    alpha_values: PairingsBn254.FrStructOutput[];
    eta: PairingsBn254.FrStructOutput;
    beta_lookup: PairingsBn254.FrStructOutput;
    gamma_lookup: PairingsBn254.FrStructOutput;
    beta_plus_one: PairingsBn254.FrStructOutput;
    beta_gamma: PairingsBn254.FrStructOutput;
    v: PairingsBn254.FrStructOutput;
    u: PairingsBn254.FrStructOutput;
    z: PairingsBn254.FrStructOutput;
    z_omega: PairingsBn254.FrStructOutput;
    z_minus_last_omega: PairingsBn254.FrStructOutput;
    l_0_at_z: PairingsBn254.FrStructOutput;
    l_n_minus_one_at_z: PairingsBn254.FrStructOutput;
    t: PairingsBn254.FrStructOutput;
    tp: PairingsBn254.G1PointStructOutput;
  };

  export type ProofStruct = {
    input_values: PromiseOrValue<BigNumberish>[];
    state_polys_commitments: [
      PairingsBn254.G1PointStruct,
      PairingsBn254.G1PointStruct,
      PairingsBn254.G1PointStruct,
      PairingsBn254.G1PointStruct
    ];
    copy_permutation_grand_product_commitment: PairingsBn254.G1PointStruct;
    quotient_poly_parts_commitments: [
      PairingsBn254.G1PointStruct,
      PairingsBn254.G1PointStruct,
      PairingsBn254.G1PointStruct,
      PairingsBn254.G1PointStruct
    ];
    state_polys_openings_at_z: [
      PairingsBn254.FrStruct,
      PairingsBn254.FrStruct,
      PairingsBn254.FrStruct,
      PairingsBn254.FrStruct
    ];
    state_polys_openings_at_z_omega: [PairingsBn254.FrStruct];
    gate_selectors_openings_at_z: [PairingsBn254.FrStruct];
    copy_permutation_polys_openings_at_z: [
      PairingsBn254.FrStruct,
      PairingsBn254.FrStruct,
      PairingsBn254.FrStruct
    ];
    copy_permutation_grand_product_opening_at_z_omega: PairingsBn254.FrStruct;
    quotient_poly_opening_at_z: PairingsBn254.FrStruct;
    linearization_poly_opening_at_z: PairingsBn254.FrStruct;
    lookup_s_poly_commitment: PairingsBn254.G1PointStruct;
    lookup_grand_product_commitment: PairingsBn254.G1PointStruct;
    lookup_s_poly_opening_at_z_omega: PairingsBn254.FrStruct;
    lookup_grand_product_opening_at_z_omega: PairingsBn254.FrStruct;
    lookup_t_poly_opening_at_z: PairingsBn254.FrStruct;
    lookup_t_poly_opening_at_z_omega: PairingsBn254.FrStruct;
    lookup_selector_poly_opening_at_z: PairingsBn254.FrStruct;
    lookup_table_type_poly_opening_at_z: PairingsBn254.FrStruct;
    opening_proof_at_z: PairingsBn254.G1PointStruct;
    opening_proof_at_z_omega: PairingsBn254.G1PointStruct;
  };

  export type ProofStructOutput = [
    BigNumber[],
    [
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput
    ],
    PairingsBn254.G1PointStructOutput,
    [
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput
    ],
    [
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput
    ],
    [PairingsBn254.FrStructOutput],
    [PairingsBn254.FrStructOutput],
    [
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput
    ],
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.FrStructOutput,
    PairingsBn254.G1PointStructOutput,
    PairingsBn254.G1PointStructOutput
  ] & {
    input_values: BigNumber[];
    state_polys_commitments: [
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput
    ];
    copy_permutation_grand_product_commitment: PairingsBn254.G1PointStructOutput;
    quotient_poly_parts_commitments: [
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput
    ];
    state_polys_openings_at_z: [
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput
    ];
    state_polys_openings_at_z_omega: [PairingsBn254.FrStructOutput];
    gate_selectors_openings_at_z: [PairingsBn254.FrStructOutput];
    copy_permutation_polys_openings_at_z: [
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput
    ];
    copy_permutation_grand_product_opening_at_z_omega: PairingsBn254.FrStructOutput;
    quotient_poly_opening_at_z: PairingsBn254.FrStructOutput;
    linearization_poly_opening_at_z: PairingsBn254.FrStructOutput;
    lookup_s_poly_commitment: PairingsBn254.G1PointStructOutput;
    lookup_grand_product_commitment: PairingsBn254.G1PointStructOutput;
    lookup_s_poly_opening_at_z_omega: PairingsBn254.FrStructOutput;
    lookup_grand_product_opening_at_z_omega: PairingsBn254.FrStructOutput;
    lookup_t_poly_opening_at_z: PairingsBn254.FrStructOutput;
    lookup_t_poly_opening_at_z_omega: PairingsBn254.FrStructOutput;
    lookup_selector_poly_opening_at_z: PairingsBn254.FrStructOutput;
    lookup_table_type_poly_opening_at_z: PairingsBn254.FrStructOutput;
    opening_proof_at_z: PairingsBn254.G1PointStructOutput;
    opening_proof_at_z_omega: PairingsBn254.G1PointStructOutput;
  };

  export type QueriesStruct = {
    commitments_at_z: PairingsBn254.G1PointStruct[];
    values_at_z: PairingsBn254.FrStruct[];
    commitments_at_z_omega: PairingsBn254.G1PointStruct[];
    values_at_z_omega: PairingsBn254.FrStruct[];
  };

  export type QueriesStructOutput = [
    PairingsBn254.G1PointStructOutput[],
    PairingsBn254.FrStructOutput[],
    PairingsBn254.G1PointStructOutput[],
    PairingsBn254.FrStructOutput[]
  ] & {
    commitments_at_z: PairingsBn254.G1PointStructOutput[];
    values_at_z: PairingsBn254.FrStructOutput[];
    commitments_at_z_omega: PairingsBn254.G1PointStructOutput[];
    values_at_z_omega: PairingsBn254.FrStructOutput[];
  };
}

export interface Plonk4VerifierWithAccessToDNextInterface
  extends utils.Interface {
  functions: {
    "compute_powers_of_alpha(((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))": FunctionFragment;
    "prepare_queries((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))": FunctionFragment;
    "rescue_custom_gate_linearization_contribution((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "compute_powers_of_alpha"
      | "prepare_queries"
      | "rescue_custom_gate_linearization_contribution"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "compute_powers_of_alpha",
    values: [Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "prepare_queries",
    values: [
      VerificationKeyStruct,
      Plonk4VerifierWithAccessToDNext.ProofStruct,
      Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rescue_custom_gate_linearization_contribution",
    values: [
      VerificationKeyStruct,
      Plonk4VerifierWithAccessToDNext.ProofStruct,
      Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "compute_powers_of_alpha",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepare_queries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescue_custom_gate_linearization_contribution",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Plonk4VerifierWithAccessToDNext extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Plonk4VerifierWithAccessToDNextInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    compute_powers_of_alpha(
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    prepare_queries(
      vk: VerificationKeyStruct,
      proof: Plonk4VerifierWithAccessToDNext.ProofStruct,
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<
      [Plonk4VerifierWithAccessToDNext.QueriesStructOutput] & {
        queries: Plonk4VerifierWithAccessToDNext.QueriesStructOutput;
      }
    >;

    rescue_custom_gate_linearization_contribution(
      vk: VerificationKeyStruct,
      proof: Plonk4VerifierWithAccessToDNext.ProofStruct,
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<
      [PairingsBn254.G1PointStructOutput] & {
        result: PairingsBn254.G1PointStructOutput;
      }
    >;
  };

  compute_powers_of_alpha(
    state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  prepare_queries(
    vk: VerificationKeyStruct,
    proof: Plonk4VerifierWithAccessToDNext.ProofStruct,
    state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
    overrides?: CallOverrides
  ): Promise<Plonk4VerifierWithAccessToDNext.QueriesStructOutput>;

  rescue_custom_gate_linearization_contribution(
    vk: VerificationKeyStruct,
    proof: Plonk4VerifierWithAccessToDNext.ProofStruct,
    state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
    overrides?: CallOverrides
  ): Promise<PairingsBn254.G1PointStructOutput>;

  callStatic: {
    compute_powers_of_alpha(
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    prepare_queries(
      vk: VerificationKeyStruct,
      proof: Plonk4VerifierWithAccessToDNext.ProofStruct,
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<Plonk4VerifierWithAccessToDNext.QueriesStructOutput>;

    rescue_custom_gate_linearization_contribution(
      vk: VerificationKeyStruct,
      proof: Plonk4VerifierWithAccessToDNext.ProofStruct,
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<PairingsBn254.G1PointStructOutput>;
  };

  filters: {};

  estimateGas: {
    compute_powers_of_alpha(
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepare_queries(
      vk: VerificationKeyStruct,
      proof: Plonk4VerifierWithAccessToDNext.ProofStruct,
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rescue_custom_gate_linearization_contribution(
      vk: VerificationKeyStruct,
      proof: Plonk4VerifierWithAccessToDNext.ProofStruct,
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    compute_powers_of_alpha(
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepare_queries(
      vk: VerificationKeyStruct,
      proof: Plonk4VerifierWithAccessToDNext.ProofStruct,
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rescue_custom_gate_linearization_contribution(
      vk: VerificationKeyStruct,
      proof: Plonk4VerifierWithAccessToDNext.ProofStruct,
      state: Plonk4VerifierWithAccessToDNext.PartialVerifierStateStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
