/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IL2NaffleBaseInternalInterface extends utils.Interface {
  functions: {};

  events: {
    "L2NaffleCancelled(uint256,bytes32)": EventFragment;
    "L2NaffleCreated(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint8,uint8)": EventFragment;
    "L2NaffleFinished(uint256,address,bytes32)": EventFragment;
    "OpenEntryTicketsUsed(uint256,address,uint256[])": EventFragment;
    "TicketsBought(uint256,address,uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "L2NaffleCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "L2NaffleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "L2NaffleFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenEntryTicketsUsed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketsBought"): EventFragment;
}

export interface L2NaffleCancelledEventObject {
  naffleId: BigNumber;
  messageHash: string;
}
export type L2NaffleCancelledEvent = TypedEvent<
  [BigNumber, string],
  L2NaffleCancelledEventObject
>;

export type L2NaffleCancelledEventFilter =
  TypedEventFilter<L2NaffleCancelledEvent>;

export interface L2NaffleCreatedEventObject {
  naffleId: BigNumber;
  owner: string;
  ethTokenAddress: string;
  nftId: BigNumber;
  paidTicketSpots: BigNumber;
  freeTicketSpots: BigNumber;
  ticketPriceInWei: BigNumber;
  endTime: BigNumber;
  naffleType: number;
  tokenContractType: number;
}
export type L2NaffleCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number
  ],
  L2NaffleCreatedEventObject
>;

export type L2NaffleCreatedEventFilter = TypedEventFilter<L2NaffleCreatedEvent>;

export interface L2NaffleFinishedEventObject {
  naffleId: BigNumber;
  winner: string;
  messageHash: string;
}
export type L2NaffleFinishedEvent = TypedEvent<
  [BigNumber, string, string],
  L2NaffleFinishedEventObject
>;

export type L2NaffleFinishedEventFilter =
  TypedEventFilter<L2NaffleFinishedEvent>;

export interface OpenEntryTicketsUsedEventObject {
  naffleId: BigNumber;
  owner: string;
  ticketIds: BigNumber[];
}
export type OpenEntryTicketsUsedEvent = TypedEvent<
  [BigNumber, string, BigNumber[]],
  OpenEntryTicketsUsedEventObject
>;

export type OpenEntryTicketsUsedEventFilter =
  TypedEventFilter<OpenEntryTicketsUsedEvent>;

export interface TicketsBoughtEventObject {
  naffleId: BigNumber;
  buyer: string;
  ticketIds: BigNumber[];
  ticketPriceInWei: BigNumber;
}
export type TicketsBoughtEvent = TypedEvent<
  [BigNumber, string, BigNumber[], BigNumber],
  TicketsBoughtEventObject
>;

export type TicketsBoughtEventFilter = TypedEventFilter<TicketsBoughtEvent>;

export interface IL2NaffleBaseInternal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IL2NaffleBaseInternalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "L2NaffleCancelled(uint256,bytes32)"(
      naffleId?: PromiseOrValue<BigNumberish> | null,
      messageHash?: null
    ): L2NaffleCancelledEventFilter;
    L2NaffleCancelled(
      naffleId?: PromiseOrValue<BigNumberish> | null,
      messageHash?: null
    ): L2NaffleCancelledEventFilter;

    "L2NaffleCreated(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint8,uint8)"(
      naffleId?: null,
      owner?: PromiseOrValue<string> | null,
      ethTokenAddress?: PromiseOrValue<string> | null,
      nftId?: null,
      paidTicketSpots?: null,
      freeTicketSpots?: null,
      ticketPriceInWei?: null,
      endTime?: null,
      naffleType?: PromiseOrValue<BigNumberish> | null,
      tokenContractType?: null
    ): L2NaffleCreatedEventFilter;
    L2NaffleCreated(
      naffleId?: null,
      owner?: PromiseOrValue<string> | null,
      ethTokenAddress?: PromiseOrValue<string> | null,
      nftId?: null,
      paidTicketSpots?: null,
      freeTicketSpots?: null,
      ticketPriceInWei?: null,
      endTime?: null,
      naffleType?: PromiseOrValue<BigNumberish> | null,
      tokenContractType?: null
    ): L2NaffleCreatedEventFilter;

    "L2NaffleFinished(uint256,address,bytes32)"(
      naffleId?: PromiseOrValue<BigNumberish> | null,
      winner?: null,
      messageHash?: null
    ): L2NaffleFinishedEventFilter;
    L2NaffleFinished(
      naffleId?: PromiseOrValue<BigNumberish> | null,
      winner?: null,
      messageHash?: null
    ): L2NaffleFinishedEventFilter;

    "OpenEntryTicketsUsed(uint256,address,uint256[])"(
      naffleId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      ticketIds?: null
    ): OpenEntryTicketsUsedEventFilter;
    OpenEntryTicketsUsed(
      naffleId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      ticketIds?: null
    ): OpenEntryTicketsUsedEventFilter;

    "TicketsBought(uint256,address,uint256[],uint256)"(
      naffleId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      ticketIds?: null,
      ticketPriceInWei?: null
    ): TicketsBoughtEventFilter;
    TicketsBought(
      naffleId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      ticketIds?: null,
      ticketPriceInWei?: null
    ): TicketsBoughtEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
