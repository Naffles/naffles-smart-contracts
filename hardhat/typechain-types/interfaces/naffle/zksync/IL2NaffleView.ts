/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace NaffleTypes {
  export type L2NaffleStruct = {
    ethTokenAddress: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    naffleId: PromiseOrValue<BigNumberish>;
    nftId: PromiseOrValue<BigNumberish>;
    paidTicketSpots: PromiseOrValue<BigNumberish>;
    openEntryTicketSpots: PromiseOrValue<BigNumberish>;
    numberOfPaidTickets: PromiseOrValue<BigNumberish>;
    numberOfOpenEntries: PromiseOrValue<BigNumberish>;
    ticketPriceInWei: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    winningTicketId: PromiseOrValue<BigNumberish>;
    winningTicketType: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    naffleTokenType: PromiseOrValue<BigNumberish>;
    naffleType: PromiseOrValue<BigNumberish>;
  };

  export type L2NaffleStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    number
  ] & {
    ethTokenAddress: string;
    owner: string;
    naffleId: BigNumber;
    nftId: BigNumber;
    paidTicketSpots: BigNumber;
    openEntryTicketSpots: BigNumber;
    numberOfPaidTickets: BigNumber;
    numberOfOpenEntries: BigNumber;
    ticketPriceInWei: BigNumber;
    endTime: BigNumber;
    winningTicketId: BigNumber;
    winningTicketType: number;
    status: number;
    naffleTokenType: number;
    naffleType: number;
  };
}

export interface IL2NaffleViewInterface extends utils.Interface {
  functions: {
    "getAdminRole()": FunctionFragment;
    "getL1NaffleContractAddress()": FunctionFragment;
    "getMaxPostponeTime()": FunctionFragment;
    "getNaffleById(uint256)": FunctionFragment;
    "getOpenEntryRatio()": FunctionFragment;
    "getOpenEntryTicketContractAddress()": FunctionFragment;
    "getPaidTicketContractAddress()": FunctionFragment;
    "getPlatformFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAdminRole"
      | "getL1NaffleContractAddress"
      | "getMaxPostponeTime"
      | "getNaffleById"
      | "getOpenEntryRatio"
      | "getOpenEntryTicketContractAddress"
      | "getPaidTicketContractAddress"
      | "getPlatformFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAdminRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL1NaffleContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPostponeTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNaffleById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenEntryRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenEntryTicketContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaidTicketContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL1NaffleContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPostponeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNaffleById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenEntryRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenEntryTicketContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaidTicketContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFee",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IL2NaffleView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IL2NaffleViewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAdminRole(
      overrides?: CallOverrides
    ): Promise<[string] & { adminRole: string }>;

    getL1NaffleContractAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { l1NaffleContractAddress: string }>;

    getMaxPostponeTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxPostponeTime: BigNumber }>;

    getNaffleById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NaffleTypes.L2NaffleStructOutput]>;

    getOpenEntryRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { openEntryRatio: BigNumber }>;

    getOpenEntryTicketContractAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { openEntryTicketContractAddress: string }>;

    getPaidTicketContractAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { paidTicketContractAddress: string }>;

    getPlatformFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { platformFee: BigNumber }>;
  };

  getAdminRole(overrides?: CallOverrides): Promise<string>;

  getL1NaffleContractAddress(overrides?: CallOverrides): Promise<string>;

  getMaxPostponeTime(overrides?: CallOverrides): Promise<BigNumber>;

  getNaffleById(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NaffleTypes.L2NaffleStructOutput>;

  getOpenEntryRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getOpenEntryTicketContractAddress(overrides?: CallOverrides): Promise<string>;

  getPaidTicketContractAddress(overrides?: CallOverrides): Promise<string>;

  getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getAdminRole(overrides?: CallOverrides): Promise<string>;

    getL1NaffleContractAddress(overrides?: CallOverrides): Promise<string>;

    getMaxPostponeTime(overrides?: CallOverrides): Promise<BigNumber>;

    getNaffleById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NaffleTypes.L2NaffleStructOutput>;

    getOpenEntryRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenEntryTicketContractAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    getPaidTicketContractAddress(overrides?: CallOverrides): Promise<string>;

    getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getAdminRole(overrides?: CallOverrides): Promise<BigNumber>;

    getL1NaffleContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxPostponeTime(overrides?: CallOverrides): Promise<BigNumber>;

    getNaffleById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenEntryRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenEntryTicketContractAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaidTicketContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAdminRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getL1NaffleContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxPostponeTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNaffleById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenEntryRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOpenEntryTicketContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaidTicketContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
