/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace NaffleTypes {
  export type PaidTicketStruct = {
    ticketPriceInWei: PromiseOrValue<BigNumberish>;
    naffleId: PromiseOrValue<BigNumberish>;
    ticketIdOnNaffle: PromiseOrValue<BigNumberish>;
    winningTicket: PromiseOrValue<boolean>;
  };

  export type PaidTicketStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    ticketPriceInWei: BigNumber;
    naffleId: BigNumber;
    ticketIdOnNaffle: BigNumber;
    winningTicket: boolean;
  };
}

export interface IL2PaidTicketViewInterface extends utils.Interface {
  functions: {
    "getAdminRole()": FunctionFragment;
    "getL2NaffleContractAddress()": FunctionFragment;
    "getOwnerOfNaffleTicketId(uint256,uint256)": FunctionFragment;
    "getTicketById(uint256)": FunctionFragment;
    "getTicketByIdOnNaffle(uint256,uint256)": FunctionFragment;
    "getTotalSupply()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAdminRole"
      | "getL2NaffleContractAddress"
      | "getOwnerOfNaffleTicketId"
      | "getTicketById"
      | "getTicketByIdOnNaffle"
      | "getTotalSupply"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAdminRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2NaffleContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerOfNaffleTicketId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketByIdOnNaffle",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2NaffleContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerOfNaffleTicketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketByIdOnNaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IL2PaidTicketView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IL2PaidTicketViewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAdminRole(
      overrides?: CallOverrides
    ): Promise<[string] & { adminRole: string }>;

    getL2NaffleContractAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { l2NaffleContractAddress: string }>;

    getOwnerOfNaffleTicketId(
      _naffleId: PromiseOrValue<BigNumberish>,
      _ticketIdOnNaffle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    getTicketById(
      _ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [NaffleTypes.PaidTicketStructOutput] & {
        ticket: NaffleTypes.PaidTicketStructOutput;
      }
    >;

    getTicketByIdOnNaffle(
      _ticketIdOnNaffle: PromiseOrValue<BigNumberish>,
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [NaffleTypes.PaidTicketStructOutput] & {
        ticket: NaffleTypes.PaidTicketStructOutput;
      }
    >;

    getTotalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply: BigNumber }>;
  };

  getAdminRole(overrides?: CallOverrides): Promise<string>;

  getL2NaffleContractAddress(overrides?: CallOverrides): Promise<string>;

  getOwnerOfNaffleTicketId(
    _naffleId: PromiseOrValue<BigNumberish>,
    _ticketIdOnNaffle: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTicketById(
    _ticketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NaffleTypes.PaidTicketStructOutput>;

  getTicketByIdOnNaffle(
    _ticketIdOnNaffle: PromiseOrValue<BigNumberish>,
    _naffleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NaffleTypes.PaidTicketStructOutput>;

  getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getAdminRole(overrides?: CallOverrides): Promise<string>;

    getL2NaffleContractAddress(overrides?: CallOverrides): Promise<string>;

    getOwnerOfNaffleTicketId(
      _naffleId: PromiseOrValue<BigNumberish>,
      _ticketIdOnNaffle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTicketById(
      _ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NaffleTypes.PaidTicketStructOutput>;

    getTicketByIdOnNaffle(
      _ticketIdOnNaffle: PromiseOrValue<BigNumberish>,
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NaffleTypes.PaidTicketStructOutput>;

    getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getAdminRole(overrides?: CallOverrides): Promise<BigNumber>;

    getL2NaffleContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerOfNaffleTicketId(
      _naffleId: PromiseOrValue<BigNumberish>,
      _ticketIdOnNaffle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketById(
      _ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketByIdOnNaffle(
      _ticketIdOnNaffle: PromiseOrValue<BigNumberish>,
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAdminRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getL2NaffleContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerOfNaffleTicketId(
      _naffleId: PromiseOrValue<BigNumberish>,
      _ticketIdOnNaffle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketById(
      _ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketByIdOnNaffle(
      _ticketIdOnNaffle: PromiseOrValue<BigNumberish>,
      _naffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
